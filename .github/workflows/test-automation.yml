name: Test Automation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  NEXT_PUBLIC_ENABLE_STRATIX: 'true'
  CI: true

jobs:
  # Static Analysis and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            automation/reports/vitest-junit.xml
            automation/reports/vitest-results.json
            automation/reports/vitest-report.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: automation/reports/coverage/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start Supabase (local)
        run: |
          npx supabase start
        continue-on-error: true

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            automation/reports/vitest-junit.xml
            automation/reports/vitest-results.json

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: [chromium-desktop, firefox-desktop, webkit-desktop]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Start application
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.project }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results-${{ matrix.project }}
          path: |
            automation/reports/playwright-report/
            automation/reports/test-results/
            automation/reports/screenshots/
            automation/reports/videos/

  # Multi-tenant E2E Tests
  multi-tenant-tests:
    name: Multi-tenant E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Start application
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run multi-tenant tests
        run: npx playwright test --project=fema-tenant --project=siga-tenant --project=stratix-tenant
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          FEMA_TENANT_URL: http://fema.localhost:3000
          SIGA_TENANT_URL: http://siga.localhost:3000
          STRATIX_TENANT_URL: http://stratix.localhost:3000

      - name: Upload multi-tenant test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: multi-tenant-test-results
          path: |
            automation/reports/playwright-report/
            automation/reports/test-results/

  # Mobile E2E Tests
  mobile-tests:
    name: Mobile E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install chromium webkit

      - name: Start application
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run mobile tests
        run: npm run test:e2e:mobile
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: |
            automation/reports/playwright-report/
            automation/reports/test-results/

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Start application
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run performance tests
        run: npx playwright test --project=performance
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            automation/reports/performance/
            automation/reports/lighthouse/

  # Visual Regression Tests
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Start application
        run: |
          npm run build
          npm start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run visual regression tests
        run: npm run test:visual
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            automation/reports/playwright-report/
            automation/reports/visual-diffs/

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, multi-tenant-tests, mobile-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count test files
          unit_tests=$(find test-results/unit-test-results -name "*.xml" | wc -l)
          integration_tests=$(find test-results/integration-test-results -name "*.xml" | wc -l)
          e2e_tests=$(find test-results/e2e-test-results-* -name "*.json" | wc -l)
          
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: $unit_tests suites" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: $integration_tests suites" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: $e2e_tests projects" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Coverage summary
          if [ -f "test-results/coverage-reports/coverage-summary.json" ]; then
            echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat test-results/coverage-reports/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let comment = '## 🧪 Test Results Summary\n\n';
            
            // Add test status badges
            const jobs = [
              { name: 'Unit Tests', status: '${{ needs.unit-tests.result }}' },
              { name: 'Integration Tests', status: '${{ needs.integration-tests.result }}' },
              { name: 'E2E Tests', status: '${{ needs.e2e-tests.result }}' },
              { name: 'Multi-tenant Tests', status: '${{ needs.multi-tenant-tests.result }}' },
              { name: 'Mobile Tests', status: '${{ needs.mobile-tests.result }}' }
            ];
            
            jobs.forEach(job => {
              const emoji = job.status === 'success' ? '✅' : 
                           job.status === 'failure' ? '❌' : 
                           job.status === 'skipped' ? '⏭️' : '⚠️';
              comment += `${emoji} **${job.name}**: ${job.status}\n`;
            });
            
            comment += '\n📊 **Detailed reports available in workflow artifacts**';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Upload consolidated test results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-results
          path: test-results/
          retention-days: 30

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: snyk-report.json

  # Deploy staging (for develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: echo "Deploying to staging environment"
        # Add your deployment steps here

      - name: Run smoke tests on staging
        run: |
          npx playwright test --project=smoke-tests
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.STAGING_URL }}

  # Deploy production (for main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-summary, security-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: echo "Deploying to production environment"
        # Add your deployment steps here

      - name: Run smoke tests on production
        run: |
          npx playwright test --project=smoke-tests
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.PRODUCTION_URL }}

      - name: Notify team of deployment
        if: success()
        run: |
          echo "🚀 Production deployment successful!"
          # Add notification logic (Slack, email, etc.)