import { stratixAPI } from './api-client'
import { stratixDataService } from './data-service'
import { roleBasedAI } from './role-based-ai'
import type { CompanyContext } from './data-service'
import type { UserRole } from './role-based-ai'
import type { StratixKPI, StratixInsight, StratixActionPlan } from './api-client'

export type DashboardView = 'overview' | 'initiatives' | 'areas' | 'analytics'

export interface DashboardAIEnhancement {
  view: DashboardView
  insights: StratixInsight[]
  kpis: StratixKPI[]
  recommendations: string[]
  alerts: DashboardAlert[]
  predictions: DashboardPrediction[]
  contextualHelp: string[]
  smartActions: SmartAction[]
}

export interface DashboardAlert {
  id: string
  type: 'warning' | 'info' | 'success' | 'error'
  title: string
  description: string
  priority: 'high' | 'medium' | 'low'
  actionRequired: boolean
  relatedItems: string[]
  dismissible: boolean
}

export interface DashboardPrediction {
  id: string
  title: string
  description: string
  confidence: number
  timeline: 'next_week' | 'next_month' | 'next_quarter'
  impact: 'positive' | 'negative' | 'neutral'
  relatedMetrics: string[]
}

export interface SmartAction {
  id: string
  title: string
  description: string
  type: 'automation' | 'optimization' | 'alert' | 'report'
  estimatedImpact: string
  difficulty: 'easy' | 'medium' | 'hard'
  timeRequired: string
}

class DashboardAIIntegrationService {
  
  // Generate AI enhancements for overview dashboard
  async enhanceOverviewDashboard(
    userId: string,
    userRole: UserRole,
    context: CompanyContext
  ): Promise<DashboardAIEnhancement> {
    console.log('üéØ Enhancing overview dashboard with AI for role:', userRole)
    
    try {
      // Generate role-based insights for overview
      const roleBasedResponse = await roleBasedAI.processRoleBasedQuery(userId, {
        role: userRole,
        query: 'Proporciona un an√°lisis general del estado de la empresa, identificando las m√©tricas m√°s importantes, alertas cr√≠ticas y oportunidades de mejora inmediatas',
        context,
        analysisType: 'strategic'
      })

      // Generate context-based insights
      const contextInsights = stratixDataService.generateInsightsFromContext(context)
      const contextKPIs = stratixDataService.generateKPIsFromContext(context)

      // Generate dashboard-specific alerts
      const alerts = this.generateOverviewAlerts(context, userRole)
      const predictions = this.generateOverviewPredictions(context, userRole)
      const smartActions = this.generateOverviewSmartActions(context, userRole)

      const enhancement: DashboardAIEnhancement = {
        view: 'overview',
        insights: [...(roleBasedResponse.insights || []), ...contextInsights],
        kpis: [...(roleBasedResponse.kpis || []), ...contextKPIs],
        recommendations: [
          ...roleBasedResponse.recommendations,
          'Revisa las iniciativas con mayor retraso para tomar acciones correctivas',
          'Considera optimizar los procesos en √°reas con menor rendimiento',
          'Eval√∫a la reasignaci√≥n de recursos hacia iniciativas de alto impacto'
        ],
        alerts,
        predictions,
        contextualHelp: [
          'El dashboard de resumen muestra las m√©tricas m√°s cr√≠ticas de tu organizaci√≥n',
          'Los KPIs se actualizan en tiempo real basados en el progreso de las iniciativas',
          'Las alertas te notifican sobre situaciones que requieren atenci√≥n inmediata',
          'Usa el chat de IA para hacer consultas espec√≠ficas sobre cualquier m√©trica'
        ],
        smartActions
      }

      return enhancement

    } catch (error) {
      console.error('‚ùå Error enhancing overview dashboard:', error)
      return this.getDefaultEnhancement('overview')
    }
  }

  // Generate AI enhancements for initiatives dashboard
  async enhanceInitiativesDashboard(
    userId: string,
    userRole: UserRole,
    context: CompanyContext
  ): Promise<DashboardAIEnhancement> {
    console.log('üéØ Enhancing initiatives dashboard with AI for role:', userRole)
    
    try {
      const roleBasedResponse = await roleBasedAI.processRoleBasedQuery(userId, {
        role: userRole,
        query: 'Analiza el portafolio de iniciativas actual, identifica cuellos de botella, iniciativas en riesgo y oportunidades de optimizaci√≥n. Proporciona recomendaciones espec√≠ficas para mejorar la ejecuci√≥n.',
        context,
        analysisType: 'operational'
      })

      const alerts = this.generateInitiativesAlerts(context, userRole)
      const predictions = this.generateInitiativesPredictions(context, userRole)
      const smartActions = this.generateInitiativesSmartActions(context, userRole)

      const enhancement: DashboardAIEnhancement = {
        view: 'initiatives',
        insights: roleBasedResponse.insights || [],
        kpis: roleBasedResponse.kpis || [],
        recommendations: [
          ...roleBasedResponse.recommendations,
          'Prioriza iniciativas con mayor impacto estrat√©gico',
          'Identifica dependencias cr√≠ticas entre iniciativas',
          'Considera consolidar iniciativas con objetivos similares'
        ],
        alerts,
        predictions,
        contextualHelp: [
          'El dashboard de iniciativas te permite gestionar todo el portafolio de proyectos',
          'Filtra por estado, √°rea o prioridad para enfocarte en lo m√°s importante',
          'Las m√©tricas de progreso se calculan autom√°ticamente desde las subtareas',
          'Usa las predicciones de IA para anticipar problemas potenciales'
        ],
        smartActions
      }

      return enhancement

    } catch (error) {
      console.error('‚ùå Error enhancing initiatives dashboard:', error)
      return this.getDefaultEnhancement('initiatives')
    }
  }

  // Generate AI enhancements for areas dashboard
  async enhanceAreasDashboard(
    userId: string,
    userRole: UserRole,
    context: CompanyContext
  ): Promise<DashboardAIEnhancement> {
    console.log('üéØ Enhancing areas dashboard with AI for role:', userRole)
    
    try {
      const roleBasedResponse = await roleBasedAI.processRoleBasedQuery(userId, {
        role: userRole,
        query: 'Eval√∫a el rendimiento por √°reas organizacionales, identifica desbalances de carga de trabajo, oportunidades de colaboraci√≥n entre √°reas y necesidades de fortalecimiento espec√≠ficas.',
        context,
        analysisType: 'operational'
      })

      const alerts = this.generateAreasAlerts(context, userRole)
      const predictions = this.generateAreasPredictions(context, userRole)
      const smartActions = this.generateAreasSmartActions(context, userRole)

      const enhancement: DashboardAIEnhancement = {
        view: 'areas',
        insights: roleBasedResponse.insights || [],
        kpis: roleBasedResponse.kpis || [],
        recommendations: [
          ...roleBasedResponse.recommendations,
          'Equilibra la carga de trabajo entre √°reas con diferentes niveles de ocupaci√≥n',
          'Facilita la colaboraci√≥n entre √°reas con objetivos complementarios',
          'Identifica oportunidades de intercambio de mejores pr√°cticas'
        ],
        alerts,
        predictions,
        contextualHelp: [
          'El dashboard de √°reas muestra el rendimiento organizacional por departamentos',
          'Compara m√©tricas entre √°reas para identificar oportunidades de mejora',
          'Los managers pueden ver detalles espec√≠ficos de su √°rea asignada',
          'Usa los insights de IA para optimizar la distribuci√≥n de recursos'
        ],
        smartActions
      }

      return enhancement

    } catch (error) {
      console.error('‚ùå Error enhancing areas dashboard:', error)
      return this.getDefaultEnhancement('areas')
    }
  }

  // Generate AI enhancements for analytics dashboard
  async enhanceAnalyticsDashboard(
    userId: string,
    userRole: UserRole,
    context: CompanyContext
  ): Promise<DashboardAIEnhancement> {
    console.log('üéØ Enhancing analytics dashboard with AI for role:', userRole)
    
    try {
      const roleBasedResponse = await roleBasedAI.processRoleBasedQuery(userId, {
        role: userRole,
        query: 'Realiza un an√°lisis profundo de tendencias, patrones de rendimiento, correlaciones entre m√©tricas y proyecciones futuras. Identifica oportunidades de optimizaci√≥n basadas en datos hist√≥ricos.',
        context,
        analysisType: 'predictive'
      })

      const alerts = this.generateAnalyticsAlerts(context, userRole)
      const predictions = this.generateAnalyticsPredictions(context, userRole)
      const smartActions = this.generateAnalyticsSmartActions(context, userRole)

      const enhancement: DashboardAIEnhancement = {
        view: 'analytics',
        insights: roleBasedResponse.insights || [],
        kpis: roleBasedResponse.kpis || [],
        recommendations: [
          ...roleBasedResponse.recommendations,
          'Monitorea las tendencias de rendimiento para detectar patrones emergentes',
          'Utiliza correlaciones identificadas para optimizar la toma de decisiones',
          'Establece alertas autom√°ticas basadas en desviaciones significativas'
        ],
        alerts,
        predictions,
        contextualHelp: [
          'El dashboard de anal√≠tica proporciona insights profundos sobre tendencias y patrones',
          'Los gr√°ficos interactivos te permiten explorar datos desde diferentes perspectivas',
          'Las correlaciones de IA revelan relaciones ocultas entre m√©tricas',
          'Usa las proyecciones para planificar estrategias futuras'
        ],
        smartActions
      }

      return enhancement

    } catch (error) {
      console.error('‚ùå Error enhancing analytics dashboard:', error)
      return this.getDefaultEnhancement('analytics')
    }
  }

  // Generate view-specific alerts
  private generateOverviewAlerts(context: CompanyContext, userRole: UserRole): DashboardAlert[] {
    const alerts: DashboardAlert[] = []

    // Critical initiatives alert
    if (context.company.overdueInitiatives > 3) {
      alerts.push({
        id: 'overdue-initiatives',
        type: 'warning',
        title: 'M√∫ltiples Iniciativas Retrasadas',
        description: `${context.company.overdueInitiatives} iniciativas han superado su fecha objetivo`,
        priority: 'high',
        actionRequired: true,
        relatedItems: ['initiatives'],
        dismissible: false
      })
    }

    // Low completion rate alert
    const completionRate = (context.company.completedInitiatives / context.company.totalInitiatives) * 100
    if (completionRate < 40) {
      alerts.push({
        id: 'low-completion',
        type: 'error',
        title: 'Baja Tasa de Completaci√≥n',
        description: `Solo el ${Math.round(completionRate)}% de iniciativas han sido completadas`,
        priority: 'high',
        actionRequired: true,
        relatedItems: ['initiatives', 'areas'],
        dismissible: false
      })
    }

    return alerts
  }

  private generateInitiativesAlerts(context: CompanyContext, userRole: UserRole): DashboardAlert[] {
    const alerts: DashboardAlert[] = []
    
    // Stalled initiatives
    const stalledCount = context.initiatives.filter(i => 
      i.initiative_progress < 25 && 
      new Date(i.created_at).getTime() < Date.now() - (30 * 24 * 60 * 60 * 1000)
    ).length

    if (stalledCount > 0) {
      alerts.push({
        id: 'stalled-initiatives',
        type: 'warning',
        title: 'Iniciativas Estancadas',
        description: `${stalledCount} iniciativas con menos del 25% de progreso despu√©s de 30 d√≠as`,
        priority: 'medium',
        actionRequired: true,
        relatedItems: ['initiatives'],
        dismissible: true
      })
    }

    return alerts
  }

  private generateAreasAlerts(context: CompanyContext, userRole: UserRole): DashboardAlert[] {
    const alerts: DashboardAlert[] = []
    
    // Unbalanced workload
    const areaWorkloads = context.areas.map(area => area.initiatives_count)
    const maxWorkload = Math.max(...areaWorkloads)
    const minWorkload = Math.min(...areaWorkloads)
    
    if (maxWorkload > minWorkload * 3) {
      alerts.push({
        id: 'workload-imbalance',
        type: 'info',
        title: 'Desbalance de Carga de Trabajo',
        description: 'Algunas √°reas tienen significativamente m√°s iniciativas que otras',
        priority: 'medium',
        actionRequired: false,
        relatedItems: ['areas'],
        dismissible: true
      })
    }

    return alerts
  }

  private generateAnalyticsAlerts(context: CompanyContext, userRole: UserRole): DashboardAlert[] {
    const alerts: DashboardAlert[] = []
    
    // Performance trend alert
    if (context.company.averageProgress < 50) {
      alerts.push({
        id: 'declining-performance',
        type: 'warning',
        title: 'Tendencia de Rendimiento Preocupante',
        description: 'El progreso promedio est√° por debajo del 50%',
        priority: 'high',
        actionRequired: true,
        relatedItems: ['analytics', 'initiatives'],
        dismissible: false
      })
    }

    return alerts
  }

  // Generate predictions
  private generateOverviewPredictions(context: CompanyContext, userRole: UserRole): DashboardPrediction[] {
    const predictions: DashboardPrediction[] = []
    
    // Overall completion prediction
    const avgProgress = context.company.averageProgress
    let completionTimeframe: 'next_week' | 'next_month' | 'next_quarter' = 'next_quarter'
    let impact: 'positive' | 'negative' | 'neutral' = 'neutral'
    
    if (avgProgress > 75) {
      completionTimeframe = 'next_month'
      impact = 'positive'
    } else if (avgProgress < 40) {
      completionTimeframe = 'next_quarter'
      impact = 'negative'
    }

    predictions.push({
      id: 'completion-forecast',
      title: 'Proyecci√≥n de Completaci√≥n',
      description: `Basado en el progreso actual, se espera completar el 80% de iniciativas en ${completionTimeframe}`,
      confidence: 75,
      timeline: completionTimeframe,
      impact,
      relatedMetrics: ['completion_rate', 'average_progress']
    })

    return predictions
  }

  private generateInitiativesPredictions(context: CompanyContext, userRole: UserRole): DashboardPrediction[] {
    return [{
      id: 'bottleneck-prediction',
      title: 'Identificaci√≥n de Cuellos de Botella',
      description: 'Se prev√© que las iniciativas dependientes de recursos externos tendr√°n retrasos',
      confidence: 68,
      timeline: 'next_month',
      impact: 'negative',
      relatedMetrics: ['initiative_dependencies', 'resource_allocation']
    }]
  }

  private generateAreasPredictions(context: CompanyContext, userRole: UserRole): DashboardPrediction[] {
    return [{
      id: 'collaboration-opportunity',
      title: 'Oportunidad de Colaboraci√≥n',
      description: 'Las √°reas con objetivos complementarios podr√≠an beneficiarse de mayor colaboraci√≥n',
      confidence: 82,
      timeline: 'next_month',
      impact: 'positive',
      relatedMetrics: ['cross_area_initiatives', 'resource_sharing']
    }]
  }

  private generateAnalyticsPredictions(context: CompanyContext, userRole: UserRole): DashboardPrediction[] {
    return [{
      id: 'performance-trend',
      title: 'Tendencia de Rendimiento',
      description: 'El rendimiento general se estabilizar√° en los pr√≥ximos 2 meses con las acciones actuales',
      confidence: 73,
      timeline: 'next_quarter',
      impact: 'neutral',
      relatedMetrics: ['overall_performance', 'initiative_velocity']
    }]
  }

  // Generate smart actions
  private generateOverviewSmartActions(context: CompanyContext, userRole: UserRole): SmartAction[] {
    const actions: SmartAction[] = []
    
    if (context.company.overdueInitiatives > 2) {
      actions.push({
        id: 'prioritize-overdue',
        title: 'Priorizar Iniciativas Retrasadas',
        description: 'Crear un plan de recuperaci√≥n para las iniciativas con mayor retraso',
        type: 'optimization',
        estimatedImpact: 'Reducci√≥n del 30% en tiempo de recuperaci√≥n',
        difficulty: 'medium',
        timeRequired: '2-3 d√≠as'
      })
    }

    return actions
  }

  private generateInitiativesSmartActions(context: CompanyContext, userRole: UserRole): SmartAction[] {
    return [{
      id: 'automate-reporting',
      title: 'Automatizar Reportes de Progreso',
      description: 'Configurar reportes autom√°ticos semanales de progreso de iniciativas',
      type: 'automation',
      estimatedImpact: 'Ahorro de 5 horas semanales en reportes manuales',
      difficulty: 'easy',
      timeRequired: '1 d√≠a'
    }]
  }

  private generateAreasSmartActions(context: CompanyContext, userRole: UserRole): SmartAction[] {
    return [{
      id: 'balance-workload',
      title: 'Equilibrar Carga de Trabajo',
      description: 'Redistribuir iniciativas entre √°reas para optimizar capacidad',
      type: 'optimization',
      estimatedImpact: 'Mejora del 20% en eficiencia general',
      difficulty: 'medium',
      timeRequired: '1 semana'
    }]
  }

  private generateAnalyticsSmartActions(context: CompanyContext, userRole: UserRole): SmartAction[] {
    return [{
      id: 'setup-alerts',
      title: 'Configurar Alertas Inteligentes',
      description: 'Establecer alertas autom√°ticas basadas en desviaciones de tendencias',
      type: 'alert',
      estimatedImpact: 'Detecci√≥n 50% m√°s r√°pida de problemas',
      difficulty: 'easy',
      timeRequired: '2 horas'
    }]
  }

  // Default enhancement fallback
  private getDefaultEnhancement(view: DashboardView): DashboardAIEnhancement {
    return {
      view,
      insights: [],
      kpis: [],
      recommendations: [
        'Conecta con el asistente de IA para obtener insights personalizados',
        'Revisa los datos regularmente para identificar tendencias',
        'Utiliza los filtros para enfocarte en informaci√≥n relevante'
      ],
      alerts: [],
      predictions: [],
      contextualHelp: [
        'Este dashboard se beneficia de an√°lisis de IA avanzado',
        'Usa el chat para hacer preguntas espec√≠ficas sobre los datos',
        'Los insights se actualizan autom√°ticamente con nuevos datos'
      ],
      smartActions: []
    }
  }
}

// Export singleton instance
export const dashboardAI = new DashboardAIIntegrationService()