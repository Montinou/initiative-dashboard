<task_plan id="implementacion-asistente-contexto-datos" type="web_development">
  <task>
    <objective>
      Implementar un asistente de IA para el dashboard basado en Dialogflow CX (Generative + Webhook) con contexto de usuario y acceso RLS a datos.
    </objective>
    <description>
      La integración se realiza con Dialogflow CX (Generative Fallback + Playbook). El agente puede invocar un webhook (Cloud Functions) que accede a Supabase/BigQuery con RLS según `tenant_id`/`user_id`. La antigua API interna `/api/stratix/chat` queda deprecada (410).
    </description>
  </task>
  <analyze>
    <source type="directory">/components/stratix/</source>
    <source type="file" file="/components/dialogflow-chat-widget.tsx" />
    <source type="file" file="/app/stratix-assistant/stratix-assistant-gemini.tsx" />
    <source type="file" file="/lib/stratix/api-client.ts" />
  </analyze>
  <plan>
    <phase id="1-configuracion-dialogflow">
      <step>
        <description>Validar agente: proyecto `insaight-backend`, región `us-central1`, agent-id `7f297240-ca50-4896-8b71-e82fd707fa88`.</description>
        <details>
          - Allowed origins: añadir dominios de prod/stg y http://localhost:3000.
        </details>
      </step>
    </phase>
    <phase id="2-webhook">
      <step>
        <description>Desplegar/ligar webhook: `NEXT_PUBLIC_STRATIX_API_URL`.</description>
        <details>
          - Cloud Function con variables SUPABASE_URL y SUPABASE_SERVICE_ROLE_KEY.
          - RLS respetada vía filtros por tenant/área y vistas `manager_*`.
        </details>
      </step>
    </phase>
    <phase id="3-frontend">
      <step>
        <description>Usar `DialogflowChatWidget` en dashboard y página `/stratix-assistant`.</description>
      </step>
    </phase>
    <phase id="4-deprecation-cleanup">
      <step>
        <description>Marcar `/api/stratix/chat` como 410 y retirar hooks/componentes internos.</description>
      </step>
    </phase>
  </plan>
</task_plan>
