<task_plan id="crear-migraciones-supabase" type="migration">
<task>
<objective>
Generar una serie de scripts de migración secuenciales para Supabase a partir del esquema definitivo de la base de datos.
</objective>
<description>
El proyecto de Supabase está vacío. El objetivo es analizar el esquema completo y la documentación proporcionada para crear migraciones secuenciales que se puedan aplicar de manera segura. Las migraciones deben seguir el formato timestampz_migrationX_description.sql, donde X es un número que se incrementa en 1, y description es un nombre descriptivo de lo que contiene el archivo. Las políticas de RLS deben estar en una migración separada después de que se hayan creado todas las tablas y funciones de lógica de negocio.
</description>
</task>
<analyze>
<source type="code" file="schema.sql">
-- El esquema definitivo de la base de datos, incluyendo RLS, triggers, soft deletes y vistas.
</source>
<source type="text/markdown" file="schema-documentation-v3.md">
-- Documentación que explica el propósito de cada tabla y la lógica de negocio.
</source>
</analyze>
<plan>
<phase id="1-creacion-de-la-estructura-basica">
<step>
<description>Crear tipos de datos y tablas principales sin restricciones de clave foránea.</description>
<details>
- Crear user_role y initiative_quarter como tipos ENUM.
- Crear las tablas organizations, tenants, quarters, users, areas, user_profiles, objectives, initiatives, activities, progress_history, uploaded_files, file_areas, file_initiatives y audit_log.
- Incluir todos los campos con sus tipos y restricciones NOT NULL, así como los valores DEFAULT y la restricción CHECK en quarters.
</details>
</step>
</phase>
<phase id="2-anadir-claves-foraneas">
<step>
<description>Agregar todas las restricciones de clave foránea.</description>
<details>
- Añadir todas las restricciones FOREIGN KEY para conectar las tablas, como organizations.id con tenants.organization_id, tenants.id con areas.tenant_id, etc.
- Se debe considerar la dependencia circular entre areas y user_profiles para manager_id. Primero se crea la tabla areas sin la FK, luego user_profiles y finalmente se añade la FK a areas con un ALTER TABLE.
</details>
</step>
</phase>
<phase id="3-implementacion-de-logica-automatica">
<step>
<description>Implementar funciones y triggers para auditoría, sincronización y actualización de datos.</description>
<details>
- Crear la función handle_new_user() y su trigger para auth.users.
- Crear la función set_updated_at_timestamp() y sus triggers BEFORE UPDATE para todas las tablas que la necesiten.
- Crear la función audit_trigger_function() y sus triggers AFTER INSERT OR UPDATE OR DELETE para las tablas a auditar.
- Crear la función update_initiative_progress() y su trigger AFTER INSERT OR UPDATE OR DELETE en activities.
</details>
</step>
</phase>
<phase id="4-creacion-de-vistas-e-indices">
<step>
<description>Crear las vistas optimizadas y los índices de rendimiento.</description>
<details>
- Crear las vistas manager_initiative_summary y manager_activity_details.
- Crear los índices en las claves foráneas y en las columnas de filtro más comunes para mejorar el rendimiento de las consultas.
</details>
</step>
</phase>
<phase id="5-configuracion-de-seguridad-rls">
<step>
<description>Habilitar RLS y definir las políticas de seguridad.</description>
<details>
Crea esta migracion pero no la ejecutes, lo haremos mas tarde
- Habilitar RLS en las tablas (organizations, areas, user_profiles, objectives, initiatives, activities).
- Crear políticas de RLS granulares para cada operación (SELECT, INSERT, UPDATE, DELETE), filtrando por tenant_id y is_active donde corresponda.
</details>
</step>
</phase>
</plan>
</task_plan>