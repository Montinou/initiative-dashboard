<task_plan version="1.0" id="i18n-es-full-app">
  <meta>
    <title>Localizar toda la interfaz visible al usuario a Español (es)</title>
    <repoPath>/Users/agustinmontoya/Projectos/initiative-dashboard</repoPath>
    <owner>Frontend Platform</owner>
    <date>2025-08-11</date>
    <stack>Next.js 15 App Router (TypeScript), React 19, Supabase (Postgres + RLS), SWR</stack>
    <authProviders>app/providers.tsx + utils/supabase/*</authProviders>
    <clinerules>
      <enabled>true</enabled>
      <method>babysteps</method>
      <path>/.clinerules</path>
      <loggingFile>docs/i18n-babysteps-log.md</loggingFile>
      <rule>Respetar todas las reglas de .clinerules; avanzar en incrementos pequeños y verificables; documentar cada fase al completarla.</rule>
    </clinerules>
  </meta>

  <objectives>
    <objective>Traducir el 100% del contenido visible al usuario final al español por defecto, manteniendo lógica de negocio, RLS y flujos intactos.</objective>
    <objective>Implementar infraestructura i18n con SSR en App Router, detección de locale y mensajes por namespaces.</objective>
    <objective>Permitir selección y persistencia de idioma por usuario/tenant sin alterar datos de dominio.</objective>
  </objectives>

  <alcance>
    <incluye>
      <item>Componentes React (client y server), páginas, layouts, menús, formularios, tooltips, placeholders, aria-labels, toasts.</item>
      <item>Metadatos SEO y títulos (generateMetadata), validaciones cliente, componentes Stratix.</item>
      <item>Formateo de fechas/números/moneda conforme a locale y timezone del tenant.</item>
    </incluye>
    <excluye>
      <item>Traducción de datos de negocio persistidos (enums/DB). Se mapean solo para UI.</item>
      <item>Cambios a RLS, políticas de Supabase o llamadas de backend.</item>
    </excluye>
  </alcance>

  <principios>
    <principio>Respetar arquitectura App Router + RSC; usar next-intl compatible con SSR.</principio>
    <principio>No usar admin client en código cliente; mantener RLS.</principio>
    <principio>Evitar cadenas hardcoded; usar catálogos y utilidades t().</principio>
    <principio>Accesibilidad: traducir labels visibles respetando roles/aria-attrs.</principio>
    <principio>Hidratación SSR de AuthProvider con sesión/perfil inicial para evitar flicker.</principio>
  </principios>

  <babysteps>
    <phases>
      <phase id="P0" title="Discovery y setup de ramas">
        <definition>Auditar cadenas, decidir namespaces, preparar rama feature/i18n.</definition>
        <exitCriteria>Listado de pantallas prioritarias y queries de búsqueda definidas. Log actualizado.</exitCriteria>
      </phase>
      <phase id="P1" title="Infra i18n mínima (SSR + provider + config)">
        <definition>Instalar dependencias, configurar next.config, provider, util de carga de mensajes y middleware básico.</definition>
        <exitCriteria>App arranca con defaultLocale=es, sin flicker. Log actualizado, tests mínimos pasan.</exitCriteria>
      </phase>
      <phase id="P2" title="Extracción de cadenas core (layout, navbar, auth)">
        <definition>Reemplazar textos en layout, navegación, auth flows, toasts base.</definition>
        <exitCriteria>Estas pantallas 100% en es. Snapshots actualizados. Log actualizado.</exitCriteria>
      </phase>
      <phase id="P3" title="Dashboard y Stratix">
        <definition>Traducir dashboard, widgets y componentes Stratix visibles.</definition>
        <exitCriteria>Dashboard/Stratix en es. E2E claves verdes. Log actualizado.</exitCriteria>
      </phase>
      <phase id="P4" title="Formularios, validaciones y errores">
        <definition>Mensajes de validación, placeholders, tooltips y errores.</definition>
        <exitCriteria>Flujos de formularios en es. Log actualizado.</exitCriteria>
      </phase>
      <phase id="P5" title="Mapeos de dominio y formatos">
        <definition>Mapear enums a etiquetas, centralizar Intl para fechas/números con timezone tenant.</definition>
        <exitCriteria>UI muestra labels traducidos, datos crudos intactos. Log actualizado.</exitCriteria>
      </phase>
      <phase id="P6" title="Selector de idioma y preferencia">
        <definition>Agregar selector, cookie NEXT_LOCALE, persistencia en perfil (columna locale).</definition>
        <exitCriteria>Cambio de idioma persistente y SSR correcto. Log actualizado.</exitCriteria>
      </phase>
      <phase id="P7" title="Cobertura de pruebas y QA final">
        <definition>Unit + E2E, auditoría de cobertura i18n y checklist QA.</definition>
        <exitCriteria>Pruebas verdes y checklist firmado. Log actualizado.</exitCriteria>
      </phase>
    </phases>
    <rules>
      <rule>Un PR pequeño por fase; no mezclar fases.</rule>
      <rule>Actualizar docs/i18n-babysteps-log.md al completar cada fase, antes de merge.</rule>
      <rule>Ejecutar pnpm lint, test, test:e2e en cada PR.</rule>
      <rule>No avanzar a la siguiente fase sin cumplir criterios de salida.</rule>
    </rules>
    <commitFormat>feat(i18n-P{N}): {resumen corto}</commitFormat>
    <prTitleFormat>[i18n P{N}] {resumen}</prTitleFormat>
  </babysteps>

  <hitos>
    <hito id="H1">Infra i18n (config, provider, SSR, middleware).</hito>
    <hito id="H2">Catálogos es/en y extracción de cadenas core.</hito>
    <hito id="H3">Mapeos de dominio y formatos Intl.</hito>
    <hito id="H4">Selector de idioma + preferencia persistente.</hito>
    <hito id="H5">Pruebas y QA.</hito>
  </hitos>

  <implementacion>
    <step id="S1" title="Dependencias i18n">
      <commands>
        <command>pnpm add next-intl</command>
        <command>pnpm add -D @types/intl-messageformat</command>
      </commands>
      <notes>Usar next-intl para App Router y RSC. Documentar en log al terminar.</notes>
    </step>

    <step id="S2" title="Config base y locales">
      <actions>
        <action>Crear /locales/es/*.json y /locales/en/*.json con namespaces: common, navigation, dashboard, auth, forms, stratix, errors, validation, dates.</action>
        <action>Configurar next.config.mjs con i18n: locales ['es','en'], defaultLocale 'es'.</action>
        <action>Agregar lib/i18n.ts con helpers: getMessagesFor(locale), formatDate/Number.</action>
      </actions>
    </step>

    <step id="S3" title="Providers + SSR">
      <actions>
        <action>Actualizar app/providers.tsx para aceptar initialLocale, initialMessages, initialSession, initialProfile; envolver con NextIntlClientProvider.</action>
        <action>En app/layout.tsx (RSC) resolver locale negociado y cargar mensajes; hidratar AuthProvider con sesión/perfil SSR (utils/supabase/server.ts).</action>
      </actions>
    </step>

    <step id="S4" title="Middleware de negociación">
      <actions>
        <action>Unificar middleware.ts con utils/supabase/middleware.ts: primero updateSession; luego negociar locale usando Accept-Language, cookie NEXT_LOCALE y perfil si existe.</action>
        <action>Establecer cookie NEXT_LOCALE; soportar rutas con o sin segmento /[locale] según estrategia elegida.</action>
      </actions>
    </step>

    <step id="S5" title="Selector de idioma y preferencia">
      <actions>
        <action>Agregar components/common/LanguageSwitcher.tsx en navbar/profile dropdown; actualizar cookie y disparar persistencia.</action>
        <action>Crear migración que agrega user_profiles.locale ('es'|'en') con default 'es'.</action>
        <action>API para actualizar preferencia del perfil autenticado siguiendo patrón de handlers del repo.</action>
      </actions>
    </step>

    <step id="S6" title="Extracción de cadenas">
      <actions>
        <action>Buscar cadenas hardcoded y reemplazar por t('ns.key'); usar useTranslations en client y getTranslations en server.</action>
        <action>Actualizar generateMetadata usando helpers server-side (sin hooks cliente).</action>
      </actions>
    </step>

    <step id="S7" title="Mapeos de dominio">
      <actions>
        <action>Crear lib/i18n-domain.ts para mapear enums: status, priority, roles, invitation_status, quarter_name.</action>
        <action>Usar mapeos en componentes; no modificar valores enviados/guardados.</action>
      </actions>
    </step>

    <step id="S8" title="Fechas/números/moneda">
      <actions>
        <action>Centralizar Intl en lib/i18n.ts con locale actual y timezone del tenant (organizations.timezone o settings).</action>
        <action>Aplicar en componentes de dashboard, historiales y listados.</action>
      </actions>
    </step>

    <step id="S9" title="Pruebas y QA">
      <actions>
        <action>Unit: helpers i18n, domain mappers, componentes clave con mensajes 'es'.</action>
        <action>E2E Playwright: set NEXT_LOCALE=es, verificar textos críticos, navegación y toasts.</action>
      </actions>
      <commands>
        <command>pnpm test</command>
        <command>pnpm test:e2e</command>
      </commands>
    </step>
  </implementacion>

  <estructuraArchivos>
    <dir>/locales
      <dir> /es
        <file> common.json </file>
        <file> navigation.json </file>
        <file> dashboard.json </file>
        <file> auth.json </file>
        <file> forms.json </file>
        <file> stratix.json </file>
        <file> errors.json </file>
        <file> validation.json </file>
        <file> dates.json </file>
      </dir>
      <dir> /en (espejo para fallback y QA) </dir>
    </dir>
    <files>
      <file>next.config.mjs</file>
      <file>app/providers.tsx</file>
      <file>app/layout.tsx</file>
      <file>middleware.ts</file>
      <file>utils/supabase/middleware.ts</file>
      <file>lib/i18n.ts</file>
      <file>lib/i18n-domain.ts</file>
      <file>components/common/LanguageSwitcher.tsx</file>
      <file>app/api/profile/locale/route.ts</file>
      <file>supabase/migrations/xxxx_add_locale_to_user_profiles.sql</file>
      <file>docs/i18n.md</file>
      <file>docs/i18n-babysteps-log.md</file>
    </files>
  </estructuraArchivos>

  <db_changes>
    <migration>
      <description>Agregar preferencia de idioma por usuario.</description>
      <sql><![CDATA[
-- supabase/migrations/xxxx_add_locale_to_user_profiles.sql
alter table public.user_profiles
  add column if not exists locale text not null default 'es' check (locale in ('es','en'));
      ]]></sql>
    </migration>
  </db_changes>

  <busqueda>
    <query id="Q1" purpose="Cadenas JSX literales">
      <pattern><![CDATA[>[^<]*[A-Za-z][^<]*<]]></pattern>
      <globs>**/*.{tsx,jsx}</globs>
      <exclude>**/locales/**, **/node_modules/**, **/*.test.*, **/*.spec.*</exclude>
    </query>
    <query id="Q2" purpose="placeholders/labels">
      <pattern><![CDATA[(placeholder|aria-label|title|alt)\s*=\s*["'][^"']*[A-Za-z][^"']*["']]]></pattern>
      <globs>**/*.{tsx,jsx}</globs>
    </query>
    <query id="Q3" purpose="toasts/errors">
      <pattern><![CDATA[(toast|notify|alert|console\.error)\(.*["'][A-Za-z].*["']]]></pattern>
      <globs>**/*.{ts,tsx,js,jsx}</globs>
    </query>
    <query id="Q4" purpose="Validaciones hardcoded">
      <pattern><![CDATA[new Error\(["'][^"']+["']\)|throw ["'][^"']+["']]]></pattern>
      <globs>**/*.{ts,tsx,js,jsx}</globs>
    </query>
    <query id="Q5" purpose="generateMetadata estático">
      <pattern><![CDATA[export\s+async\s+function\s+generateMetadata|export\s+const\s+metadata]]></pattern>
      <globs>**/*.{ts,tsx}</globs>
    </query>
  </busqueda>

  <criteriosAceptacion>
    <criterio>Toda UI visible está en español por defecto (anónimo y autenticado).</criterio>
    <criterio>El usuario puede alternar 'es'/'en' y la preferencia persiste (perfil + cookie).</criterio>
    <criterio>Enums se muestran traducidos en UI pero se procesan/guardan sin cambios.</criterio>
    <criterio>SSR sin flicker: layouts y páginas llegan con mensajes hidratados y AuthProvider con sesión inicial.</criterio>
    <criterio>Pruebas E2E validan textos clave en dashboard, forms, Stratix y navegación.</criterio>
  </criteriosAceptacion>

  <riesgos>
    <riesgo>Conflicto entre middleware de Supabase e i18n.</riesgo>
    <mitigacion>Unificar en un único middleware secuencial: updateSession → negociación de locale.</mitigacion>
    <riesgo>Uso de hooks cliente en contextos server-only.</riesgo>
    <mitigacion>Utilizar getTranslations/unstable_setRequestLocale en server y helpers dedicados.</mitigacion>
  </riesgos>

  <rollback>
    <paso>PRs atómicos por fase; revertir por carpeta si hay regresiones.</paso>
    <paso>Feature flag ENV APP_I18N_ENABLED=true/false para canario si aplica.</paso>
  </rollback>

  <llm_prompt>
    <purpose>Aplicar i18n y traducir la interfaz al español sin alterar lógica ni seguridad.</purpose>
    <process>Seguir metodología babysteps definida en /.clinerules; no avanzar de fase sin cumplir criterios y actualizar docs/i18n-babysteps-log.md.</process>
    <rules>
      <rule>No modificar llamadas a Supabase ni RLS; solo UI strings.</rule>
      <rule>Reemplazar cadenas hardcoded por t('namespace.key'); mensajes en /locales/es/*.json y espejo en /locales/en/*.json.</rule>
      <rule>Preservar interpolaciones y pluralización ICU: {value}, {count}, {name}.</rule>
      <rule>No traducir enums/valores de BD; usar lib/i18n-domain.ts para etiquetas.</rule>
      <rule>Accesibilidad: traducir aria-label/alt/title visibles; no eliminar atributos necesarios.</rule>
      <rule>SSR: evitar hooks cliente en generateMetadata; usar helpers server-side (getTranslations).</rule>
      <rule>Centralizar Intl.DateTimeFormat/NumberFormat en lib/i18n.ts con locale/timezone.</rule>
      <rule>Actualizar app/providers.tsx para envolver con provider i18n y pasar initialMessages/initialLocale + initialSession/profile.</rule>
      <rule>Agregar selector de idioma en menú de perfil; persistir en user_profiles.locale y cookie NEXT_LOCALE.</rule>
      <rule>Agregar tests para helpers y snapshots de componentes críticos en 'es'.</rule>
      <rule>Commits/PRs pequeños por fase; ejecutar pnpm lint/test/test:e2e en CI.</rule>
    </rules>
    <file_targets>
      <file>next.config.mjs</file>
      <file>app/layout.tsx</file>
      <file>app/providers.tsx</file>
      <file>middleware.ts</file>
      <file>utils/supabase/middleware.ts</file>
      <file>components/**/*.{tsx}</file>
      <file>hooks/**/*.{ts,tsx}</file>
      <file>lib/i18n.ts</file>
      <file>lib/i18n-domain.ts</file>
      <file>components/common/LanguageSwitcher.tsx</file>
      <file>locales/es/*.json</file>
      <file>locales/en/*.json</file>
      <file>app/api/profile/locale/route.ts</file>
    </file_targets>
    <examples>
      <example title="Reemplazo de cadena JSX"><![CDATA[
Antes:
  <Button>Upload file</Button>
Después:
  const t = useTranslations('common');
  <Button>{t('uploadFile')}</Button>

locales/es/common.json
{
  "uploadFile": "Subir archivo"
}
      ]]></example>
      <example title="Interpolación y pluralización"><![CDATA[
UI:
  <span>{completed} of {total} activities</span>
Con i18n:
  const t = useTranslations('dashboard');
  <span>{t('activitiesProgress', { completed, total })}</span>

es/dashboard.json
{
  "activitiesProgress": "{completed} de {total} actividades",
  "items": "{count, plural, one {# elemento} other {# elementos}}"
}
      ]]></example>
      <example title="Mapeo de enums de dominio"><![CDATA[
lib/i18n-domain.ts
export const statusLabel = (s: string, t: (k: string)=>string) => {
  switch (s) {
    case 'planning': return t('status.planning');
    case 'in_progress': return t('status.in_progress');
    case 'completed': return t('status.completed');
    case 'on_hold': return t('status.on_hold');
    default: return s;
  }
};

es/dashboard.json
{
  "status": {
    "planning": "Planificación",
    "in_progress": "En progreso",
    "completed": "Completado",
    "on_hold": "En espera"
  }
}
      ]]></example>
      <example title="Formato de fecha centralizado"><![CDATA[
lib/i18n.ts
export function formatDate(d: string|Date, locale: string, tz?: string) {
  return new Intl.DateTimeFormat(locale, { dateStyle: 'medium', timeZone: tz || 'UTC' }).format(new Date(d));
}
      ]]></example>
      <example title="SSR en layout (conceptual)"><![CDATA[
app/layout.tsx (RSC)
import { getMessagesFor } from '@/lib/i18n';
export default async function RootLayout({ children, params: { locale } }) {
  const messages = await getMessagesFor(locale);
  const { initialSession, initialProfile } = await getAuthHydration();
  return (
    <html lang={locale}>
      <body>
        <Providers initialLocale={locale} initialMessages={messages} initialSession={initialSession} initialProfile={initialProfile}>
          {children}
        </Providers>
      </body>
    </html>
  );
}
      ]]></example>
    </examples>
    <acceptance_tests>
      <test>UI principal en español por defecto.</test>
      <test>Selector cambia entre 'es' y 'en' y persiste.</test>
      <test>E2E verifica textos y toasts en español.</test>
    </acceptance_tests>
  </llm_prompt>
</task_plan>