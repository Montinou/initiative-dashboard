<task_plan id="implementacion-asistente-gemini" type="web_development">
  <task>
    <objective>
      Implementar un asistente de IA en el proyecto que utilice la API de Gemini 2.5 Flash y el Vercel AI SDK para proporcionar asistencia conversacional y de análisis de datos.
    </objective>
    <description>
      El asistente debe ser capaz de mantener una conversación, tener contexto del usuario (rol, nombre, área) y acceder a los datos de la base de datos de Supabase de manera segura para responder a consultas de análisis. La implementación se centrará en la configuración del backend, el frontend y la conexión con el modelo de IA.
    </description>
  </task>
  <analyze>
    <source type="directory">
      ./.clinerules
    </source>
    <source type="code" file="schema.sql">
      -- El esquema de la base de datos, incluyendo RLS (sin implementar simplemente .skip), triggers y vistas.
    </source>
    <source type="text/markdown" file="schema-doc.md">
      -- Documentación detallada del esquema para comprender las relaciones y la lógica de negocio.
    </source>
    <source type="directory">
      /app/
      /components/
      /hooks/
      /lib/
      /utils/
      /supabase/
    </source>
  </analyze>
  <plan>
    <phase id="1-configuracion-de-variables-de-entorno">
      <step>
        <description>Configurar las variables de entorno para la conexión con la API de Google Gemini.</description>
        <details>
          - usar la variable `GOOGLE_AI_API_KEY` del archivo `.env.local` como la clave de API correspondiente.
        </details>ok
      </step>
    </phase>
    <phase id="2-desarrollo-backend-api-del-asistente">
      <step>
        <description>[DEPRECATED] La API interna `/app/api/stratix/chat/route.ts` ha sido retirada (410 Gone).</description>
        <details>
          - El asistente ahora usa Dialogflow CX (Generative + Webhook) y el widget Messenger CX.
          - Usa `NEXT_PUBLIC_STRATIX_API_URL` para el webhook backend cuando se requiera proxy.
        </details>
      </step>
    </phase>
    <phase id="3-integracion-frontend-con-el-asistente">
      <step>
        <description>La UI usa `DialogflowChatWidget` en lugar de `useChat`/endpoint interno.</description>
        <details>
          - Página dedicada: `/stratix-assistant`.
          - Burbuja flotante en dashboard: `DashboardAIContainer`.
        </details>
      </step>
    </phase>
    <phase id="4-validacion-y-pruebas-finales">
      <step>
        <description>Verificar la funcionalidad completa del asistente de IA.</description>
        <details>
          - Probar el asistente con diferentes roles de usuario (CEO, Admin, Manager) para validar que el contexto se aplica correctamente.
          - Verificar que las consultas de análisis de datos devuelven información precisa y segura, respetando las políticas de RLS.
          - Confirmar que el streaming de la respuesta funciona correctamente en la UI.
        </details>
      </step>
    </phase>
  </plan>
</task_plan>
<task>
  <objective>
    Documentar el proceso de implementación del asistente de IA.
  </objective>
  <description>
    Crear documentación detallada que explique cómo se implementó el asistente, incluyendo la configuración del backend, la integración con la API de Gemini y el desarrollo del frontend.
  </description>
</task>