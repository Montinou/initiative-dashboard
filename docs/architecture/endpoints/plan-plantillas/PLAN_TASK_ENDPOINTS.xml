<?xml version="1.0" encoding="UTF-8"?>
<plan version="1.0" date="2025-08-10">
  <context>
    <repo name="initiative-dashboard" owner="Montinou" branch="main" />
    <references>
      <doc path="docs/architecture/endpoints/PLAN_REMEDIACION_ENDPOINTS_2025-08-09.md" />
      <doc path="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
      <doc path="CLAUDE.md" />
      <doc path="docs/API_REFERENCE.md" />
    </references>
  </context>

  <goals>
    <goal>Aplicar buenas prácticas de Next.js 15 App Router y Supabase RLS en endpoints.</goal>
    <goal>Unificar patrón de auth → perfil → permisos → consultas RLS → JSON.</goal>
    <goal>Eliminar referencias a columnas/tablas inexistentes o agregar migraciones.</goal>
    <goal>Alinear roles a CEO/Admin/Manager y usar helpers de permisos.</goal>
  </goals>

  <tasks>
    <task id="T1" priority="high" endpoint="app/api/analytics/route.ts">
      <description>Corregir scoping de activities por tenant, remover campos inexistentes, unificar patrón de handler.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T2" priority="high" endpoint="app/api/analytics/trends/route.ts">
      <description>Remover/guardar campos no migrados (is_strategic, budget, actual_cost, target_date) o proponer migración.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T3" priority="high" endpoint="app/api/dashboard/overview/route.ts">
      <description>Filtrar activities vía iniciativas/tenant; validar auth y perfil.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T4" priority="high" endpoint="app/api/objectives/route.ts">
      <description>Usar tabla de unión objective_initiatives para listar/relacionar iniciativas; reemplazar "Executive" por CEO.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T5" priority="high" endpoint="app/api/quarters/route.ts">
      <description>Corregir lectura de profile (user_id) y evitar asumir initiatives.objective_id.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T6" priority="high" endpoint="app/api/progress-tracking/route.ts">
      <description>Migrar a progress_history y columnas existentes; roles canónicos.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T7" priority="high" endpoint="app/api/org-admin/users/route.ts">
      <description>Normalizar uso de getUserProfile, zod y area_id; evitar strings libres para área.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T8" priority="high" endpoint="app/api/stratix/chat/route.ts">
      <description>Limitar selects a columnas reales; preferir vistas RLS manager_* para contexto.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
    <task id="T9" priority="high" endpoint="app/api/sync/bigquery/route.ts">
      <description>Definir mapping oficial y proteger campos opcionales; documentar contrato.</description>
      <template ref="docs/architecture/endpoints/plan-plantillas/ENDPOINT_TEMPLATE.md" />
    </task>
  </tasks>

  <acceptance>
    <criterion>Todos los handlers validan auth.getUser y cargan perfil por user_id.</criterion>
    <criterion>No quedan selects a columnas inexistentes según esquema público actual.</criterion>
    <criterion>Roles normalizados y verificados con helpers; Managers con filtros area_id.</criterion>
    <criterion>Respuestas y errores consistentes con el template.</criterion>
  </acceptance>

  <notes>
    <note>Revisar RLS en vistas; considerar security_invoker=true para vistas que deban respetar RLS.</note>
    <note>Para BigQuery, preferir Storage Write API o jobs de carga; manejar reintentos/backoff.</note>
  </notes>
</plan>
