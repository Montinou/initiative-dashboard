<?xml version="1.0" encoding="UTF-8"?>
<task_plan id="mejora-supabase-session-management" type="web_development">
  <task>
    <objective>
      Mejorar y optimizar el sistema existente de gestión de sesiones de Supabase, enfocándose en login, logout, manejo de sesiones y tenant ID, siguiendo las mejores prácticas de supabase-sesion.md y respetando las reglas de .clinerules.
    </objective>
    <description>
      Optimizar el sistema actual que ya incluye: autenticación con login/logout, AuthProvider en lib/auth-context.tsx, middleware funcional, y manejo de tenant ID. Se mejorará la seguridad, eficiencia y se agregarán funcionalidades faltantes siguiendo Baby Steps™.
    </description>
  </task>
  
  <analyze>
    <source type="directory">
      ./.clinerules
    </source>
    <source type="text/markdown" file="supabase-sesion.md">
      -- Guía completa de autenticación en Supabase con todas las mejores prácticas
    </source>
    <source type="file" file="lib/auth-context.tsx">
      -- AuthProvider existente con funcionalidades de login/logout y manejo de perfiles
    </source>
    <source type="file" file="app/auth/login/page.tsx">
      -- Página de login existente con tema dinámico por tenant
    </source>
    <source type="file" file="app/auth/login/client-login.tsx">
      -- Componente de login funcional con manejo de errores
    </source>
    <source type="file" file="app/auth/login/actions.ts">
      -- Server actions para autenticación funcionando
    </source>
    <source type="file" file="utils/supabase/client.ts">
      -- Cliente Supabase para navegador ya implementado
    </source>
    <source type="file" file="utils/supabase/server.ts">
      -- Cliente Supabase para servidor ya implementado
    </source>
    <source type="file" file="utils/supabase/middleware.ts">
      -- Middleware de sesiones funcionando
    </source>
    <source type="file" file="middleware.ts">
      -- Middleware principal con protección de rutas
    </source>
    <source type="file" file="components/protected-route.tsx">
      -- Componente de protección de rutas funcionando
    </source>
    <source type="file" file="lib/theme-config.ts">
      -- Sistema de temas por tenant ID ya implementado
    </source>
  </analyze>

  <plan>
    <!-- FASE 1: OPTIMIZACIÓN Y SEGURIDAD DE COMPONENTES EXISTENTES -->
    <phase id="1-optimizacion-componentes-existentes">
      <step number="1.1">
        <description>Mejorar manejo de errores en ClientLogin según supabase-sesion.md.</description>
        <details>
          - Actualizar app/auth/login/client-login.tsx para usar isAuthApiError
          - Implementar mensajes de error específicos en español según códigos de Supabase
          - Mejorar feedback visual durante estados de carga
          - Agregar timeout para prevenir colgado en autenticación
        </details>
        <validation>
          - Probar diferentes tipos de errores de autenticación
          - Verificar que los mensajes son user-friendly en español
          - Confirmar que el timeout funciona correctamente
        </validation>
        <baby_step>UN SOLO PASO: Solo mejora del manejo de errores en ClientLogin</baby_step>
      </step>

      <step number="1.2">
        <description>Optimizar AuthProvider para mejor manejo de sesiones y tenant ID.</description>
        <details>
          - Actualizar lib/auth-context.tsx para optimizar fetchUserProfile
          - Mejorar manejo de tenant_id en el contexto
          - Agregar helper específico para obtener tenant_id de forma consistente
          - Optimizar listeners de cambios de autenticación
        </details>
        <validation>
          - Verificar que tenant_id se obtiene correctamente en todos los casos
          - Probar que los cambios de sesión se manejan eficientemente
          - Confirmar que no hay memory leaks en los listeners
        </validation>
        <baby_step>UN SOLO PASO: Solo optimización del AuthProvider existente</baby_step>
      </step>

      <step number="1.3">
        <description>Mejorar sistema de logout con limpieza completa de sesión.</description>
        <details>
          - Actualizar función signOut en lib/auth-context.tsx
          - Implementar limpieza completa de estado local
          - Agregar redirección automática post-logout
          - Manejar errores de logout de forma robusta
        </details>
        <validation>
          - Probar logout desde diferentes páginas
          - Verificar que todo el estado se limpia correctamente
          - Confirmar redirección automática a login
        </validation>
        <baby_step>UN SOLO PASO: Solo mejora del sistema de logout</baby_step>
      </step>

      <step number="1.4">
        <description>Optimizar middleware para mejor performance y seguridad.</description>
        <details>
          - Revisar utils/supabase/middleware.ts para optimizaciones
          - Mejorar configuración de cookies según supabase-sesion.md
          - Agregar headers de seguridad adicionales
          - Optimizar matcher patterns en middleware.ts principal
        </details>
        <validation>
          - Verificar que las cookies se configuran con opciones seguras
          - Probar performance del middleware en diferentes rutas
          - Confirmar que los headers de seguridad se aplican
        </validation>
        <baby_step>UN SOLO PASO: Solo optimización del middleware</baby_step>
      </step>
    </phase>

    <!-- FASE 2: MEJORAS EN MANEJO DE TENANT ID Y TEMAS -->
    <phase id="2-mejoras-tenant-management">
      <step number="2.1">
        <description>Crear hook especializado para manejo de tenant ID y contexto multi-tenant.</description>
        <details>
          - Crear hooks/useTenant.tsx
          - Implementar lógica para obtener tenant_id del usuario autenticado
          - Integrar con sistema de temas existente en lib/theme-config.ts
          - Agregar validación de tenant_id en cada request
        </details>
        <validation>
          - Probar que el hook retorna tenant_id correctamente
          - Verificar integración con sistema de temas
          - Confirmar validación de tenant en diferentes contextos
        </validation>
        <baby_step>UN SOLO PASO: Solo creación del hook de tenant</baby_step>
      </step>

      <step number="2.2">
        <description>Mejorar integración entre autenticación y sistema de temas por tenant.</description>
        <details>
          - Actualizar AuthProvider para incluir información de tema
          - Mejorar sincronización entre tenant_id del usuario y tema aplicado
          - Optimizar carga de tema en app/auth/login/page.tsx
          - Asegurar consistencia de tema durante toda la sesión
        </details>
        <validation>
          - Verificar que el tema se aplica correctamente según tenant del usuario
          - Probar cambios de tema durante navegación
          - Confirmar que no hay flickering de temas
        </validation>
        <baby_step>UN SOLO PASO: Solo mejora de integración tema-autenticación</baby_step>
      </step>

      <step number="2.3">
        <description>Implementar validación de tenant ID en rutas protegidas.</description>
        <details>
          - Actualizar components/protected-route.tsx
          - Agregar validación de tenant_id en rutas sensibles
          - Implementar redirección automática si hay mismatch de tenant
        </details>
        <validation>
          - Probar protección de rutas con diferentes tenant_id
          - Verificar manejo de casos edge (usuario sin tenant)
          - Confirmar redirecciones funcionan correctamente
        </validation>
        <baby_step>UN SOLO PASO: Solo validación de tenant en rutas protegidas</baby_step>
      </step>
    </phase>

    <!-- FASE 3: OPTIMIZACIÓN DE SESIONES Y PERSISTENCIA -->
    <phase id="3-optimizacion-sesiones">
      <step number="3.1">
        <description>Implementar gestión avanzada de sesiones con refresh automático.</description>
        <details>
          - Crear utils/session-manager.ts
          - Implementar refresh automático de tokens
          - Agregar detección de sesiones expiradas
          - Manejar reconexión automática cuando sea apropiado
        </details>
        <validation>
          - Probar refresh automático de tokens
          - Verificar detección de sesiones expiradas
          - Confirmar reconexión automática funciona
        </validation>
        <baby_step>UN SOLO PASO: Solo gestión avanzada de sesiones</baby_step>
      </step>

      <step number="3.2">
        <description>Mejorar persistencia de sesión entre recargas de página.</description>
        <details>
          - Optimizar configuración de cookies en clientes Supabase
          - Implementar recuperación robusta de sesión en AuthProvider
          - Mejorar manejo de hydration en SSR
          - Agregar fallbacks para casos de storage no disponible
        </details>
        <validation>
          - Probar persistencia después de recargar página
          - Verificar comportamiento en different navegadores
          - Confirmar que SSR hydration funciona correctamente
        </validation>
        <baby_step>UN SOLO PASO: Solo mejora de persistencia de sesión</baby_step>
      </step>

      <step number="3.3">
        <description>Implementar logout centralizado con limpieza completa.</description>
        <details>
          - Crear components/auth/logout-button.tsx
          - Implementar logout desde cualquier parte de la aplicación mediante user menu
          - Agregar confirmación opcional para logout
          - Mejorar UX durante proceso de logout
        </details>
        <validation>
          - Probar logout desde diferentes componentes
          - Verificar confirmación de logout funciona
          - Confirmar UX es fluida durante logout
        </validation>
        <baby_step>UN SOLO PASO: Solo componente de logout centralizado</baby_step>
      </step>
    </phase>

    <!-- FASE 4: SEGURIDAD Y VALIDACIONES AVANZADAS -->
    <phase id="4-seguridad-validaciones">
      <step number="4.1">
        <description>Implementar validaciones de seguridad según supabase-sesion.md.</description>
        <details>
          - Crear utils/auth-security.ts
          - Implementar validación de sesiones en servidor usando getUser()
          - Agregar verificación de integridad de tokens
          - Implementar detección de sesiones comprometidas
        </details>
        <validation>
          - Probar validaciones de seguridad en servidor
          - Verificar detección de tokens comprometidos
          - Confirmar que getUser() se usa consistentemente
        </validation>
        <baby_step>UN SOLO PASO: Solo implementación de validaciones de seguridad</baby_step>
      </step>

      <step number="4.2">
        <description>Mejorar manejo de errores de autenticación con códigos específicos.</description>
        <details>
          - Crear utils/auth-errors.ts
          - Implementar mapeo de códigos de error de Supabase a mensajes en español
          - Actualizar todos los componentes para usar el nuevo sistema
          - Agregar logging de errores para debugging
        </details>
        <validation>
          - Probar diferentes tipos de errores de autenticación
          - Verificar que los mensajes son apropiados para usuarios
          - Confirmar que el logging funciona correctamente
        </validation>
        <baby_step>UN SOLO PASO: Solo sistema de manejo de errores mejorado</baby_step>
      </step>

      <step number="4.3">
        <description>Implementar rate limiting y protección contra ataques.</description>
        <details>
          - Agregar rate limiting en client-login.tsx
          - Implementar detección de intentos de login múltiples
          - Agregar protección CSRF en formularios
          - Mejorar validación de inputs en lado cliente
        </details>
        <validation>
          - Probar rate limiting con múltiples intentos
          - Verificar protección CSRF funciona
          - Confirmar validación de inputs previene ataques
        </validation>
        <baby_step>UN SOLO PASO: Solo protecciones de seguridad adicionales</baby_step>
      </step>
    </phase>

    <!-- FASE 5: TESTING Y DOCUMENTACIÓN -->
    <phase id="5-testing-documentacion">
      <step number="5.1">
        <description>Crear tests para funcionalidades de login/logout mejoradas.</description>
        <details>
          - Crear __tests__/auth/improved-auth.test.ts
          - Probar todos los flujos de login/logout
          - Mockear Supabase client apropiadamente
          - Probar manejo de errores y casos edge
        </details>
        <validation>
          - Ejecutar todos los tests y verificar que pasan
          - Confirmar cobertura de código >80% para funciones críticas
          - Verificar que mocks simulan comportamiento real
        </validation>
        <baby_step>UN SOLO PASO: Solo tests de autenticación mejorada</baby_step>
      </step>

      <step number="5.2">
        <description>Crear tests de integración para tenant ID y temas.</description>
        <details>
          - Crear __tests__/auth/tenant-integration.test.ts
          - Probar flujos completos con diferentes tenant_id
          - Verificar aplicación correcta de temas por tenant
          - Probar casos de usuarios sin tenant asignado
        </details>
        <validation>
          - Ejecutar tests de integración y verificar pasan
          - Confirmar que todos los tenant_id se manejan correctamente
          - Verificar que temas se aplican sin errores
        </validation>
        <baby_step>UN SOLO PASO: Solo tests de integración de tenant</baby_step>
      </step>

      <step number="5.3">
        <description>Documentar mejoras implementadas y guías de uso.</description>
        <details>
          - Crear docs/auth-improvements.md
          - Documentar todos los cambios realizados
          - Crear guía de uso para desarrolladores
          - Documentar best practices implementadas
        </details>
        <validation>
          - Revisar que documentación es clara y completa
          - Verificar que ejemplos de código funcionan
          - Confirmar que guías son fáciles de seguir
        </validation>
        <baby_step>UN SOLO PASO: Solo documentación de mejoras</baby_step>
      </step>
    </phase>
  </plan>

  <!-- REGLAS ESPECÍFICAS DEL PROYECTO -->
  <project_rules>
    <mandatory_compliance>
      <rule type="baby_steps">
        Cada step debe ser atómico y completamente independiente. NUNCA combinar múltiples tareas en un solo step.
      </rule>
      <rule type="validation">
        Validación incremental OBLIGATORIA después de cada step. No continuar sin verificar que el step anterior funciona.
      </rule>
      <rule type="existing_code">
        RESPETAR código existente. Solo modificar lo necesario. No reescribir componentes que ya funcionan.
      </rule>
      <rule type="typescript">
        Mantener tipado fuerte existente. Interfaces y types obligatorios para todas las nuevas props y funciones.
      </rule>
      <rule type="server_components">
        Mantener Server Components existentes. Client Components solo cuando sea absolutamente necesario.
      </rule>
      <rule type="testing">
        Cada mejora debe tener tests correspondientes. No considerar un step completo sin validación.
      </rule>
      <rule type="documentation">
        Documentar cada cambio explicando el "por qué" además del "qué".
      </rule>
    </mandatory_compliance>

    <supabase_specific_rules>
      <rule type="client_usage">
        Mantener uso de getUser() en server-side code. NUNCA usar getSession() en servidor.
      </rule>
      <rule type="ssr_compatibility">
        Conservar patrón SSR-compatible existente con @supabase/ssr.
      </rule>
      <rule type="cookie_security">
        Mejorar configuración de cookies con httpOnly, secure, sameSite según mejores prácticas.
      </rule>
      <rule type="error_handling">
        Implementar manejo específico de errores usando isAuthApiError de Supabase.
      </rule>
      <rule type="tenant_isolation">
        Mantener aislamiento por tenant_id en todas las operaciones de base de datos.
      </rule>
    </supabase_specific_rules>

    <existing_system_rules>
      <rule type="auth_provider">
        Conservar lib/auth-context.tsx existente. Solo optimizar, no reemplazar.
      </rule>
      <rule type="login_components">
        Mantener app/auth/login/* existente. Solo mejorar manejo de errores y UX.
      </rule>
      <rule type="middleware">
        Conservar middleware.ts y utils/supabase/middleware.ts funcionando. Solo optimizar.
      </rule>
      <rule type="theme_system">
        Mantener integración existente con lib/theme-config.ts y tenant ID.
      </rule>
      <rule type="protected_routes">
        Conservar components/protected-route.tsx. Solo agregar validación de tenant.
      </rule>
    </existing_system_rules>
  </project_rules>

  <!-- CRITERIOS DE ÉXITO -->
  <success_criteria>
    <criterion>
      Sistema de login/logout optimizado con mejor manejo de errores y UX mejorada.
    </criterion>
    <criterion>
      Gestión de sesiones robusta con refresh automático y persistencia mejorada.
    </criterion>
    <criterion>
      Integración perfecta entre autenticación y sistema de tenant ID/temas.
    </criterion>
    <criterion>
      Validaciones de seguridad implementadas según mejores prácticas de Supabase.
    </criterion>
    <criterion>
      Tests completos para todas las mejoras implementadas (>80% cobertura).
    </criterion>
    <criterion>
      Compatibilidad completa mantenida con SSR y Next.js App Router existente.
    </criterion>
    <criterion>
      Cumplimiento de todas las reglas definidas en .clinerules sin romper funcionalidad existente.
    </criterion>
    <criterion>
      Documentación completa de mejoras implementadas y guías de uso actualizadas.
    </criterion>
  </success_criteria>
</task_plan>
