<?xml version="1.0" encoding="UTF-8"?>
<task_plan id="data-model-migration-update" type="database_migration">
  <task>
    <objective>
      Actualizar todo el proyecto para que se alinee con el nuevo modelo de datos definido en las migraciones de Supabase (20240101000001-20240101000007). Migrar desde el modelo actual hacia el esquema optimizado con multi-tenancy, RLS, auditoría y vistas especializadas. Generar documentación técnica completa del nuevo modelo.
    </objective>
    <description>
      El proyecto necesita una migración completa para adoptar el nuevo esquema de base de datos que incluye:
      - Estructura multi-tenant con organizations/tenants
      - Modelo optimizado de objectives, initiatives y activities  
      - Sistema de quarters para planificación temporal
      - RLS (Row-Level Security) granular por roles
      - Auditoría automática con triggers
      - Vistas optimizadas para performance
      - Tipos personalizados (user_role, initiative_quarter)
      
      Se debe actualizar toda la aplicación Frontend (tipos, hooks, componentes, APIs) y generar documentación técnica actualizada.
    </description>
  </task>
  
  <analyze>
    <current_state>
      <database_schema>
        - Esquema mixto con algunas tablas del modelo anterior
        - Tipos TypeScript que no coinciden con el esquema real
        - APIs que usan campos obsoletos (name vs title en initiatives)
        - Falta integración completa con multi-tenancy
        - RLS políticas no implementadas completamente
      </database_schema>
      
      <migration_files_available>
        - 20240101000001_create_base_tables_and_types.sql (Tablas base y tipos)
        - 20240101000002_create_auth_sync_trigger.sql (Sincronización auth)
        - 20240101000003_add_foreign_key_constraints.sql (Constraints)
        - 20240101000004_add_audit_function_and_triggers.sql (Auditoría)
        - 20240101000005_enable_rls_and_policies.sql (RLS políticas)
        - 20240101000006_create_optimized_views.sql (Vistas optimizadas)
        - 20240101000007_create_performance_indexes.sql (Índices performance)
      </migration_files_available>
      
      <new_schema_features>
        - Tabla organizations como entidad raíz
        - Tabla tenants para multi-tenancy real
        - Tabla quarters para gestión de trimestres
        - Tabla objective_quarters para planificación temporal
        - Tabla objective_initiatives para jerarquía clara
        - Sistema de auditoría completo con audit_log
        - Vistas especializadas (manager_initiative_summary, etc.)
        - Tipos personalizados (user_role, initiative_quarter)
        - RLS políticas granulares por rol
      </new_schema_features>
      
      <areas_to_update>
        - Tipos TypeScript en lib/types/
        - Hooks de datos en hooks/
        - Componentes que consumen datos
        - APIs y endpoints
        - Validaciones y schemas
        - Documentación técnica
      </areas_to_update>
    </current_state>
  </analyze>

  <plan>
    <!-- FASE 1: ACTUALIZACIÓN DE TIPOS Y INTERFACES -->
    <phase id="1-tipos-interfaces-actualizacion">
      <step number="1.1">
        <description>Actualizar tipos TypeScript para alinearse con el nuevo esquema de base de datos.</description>
        <details>
          - Actualizar lib/types/supabase.ts con el esquema exacto de las migraciones
          - Crear interfaces para organizations, tenants, quarters
          - Actualizar interfaces de objectives, initiatives, activities según nuevo esquema
          - Agregar tipos para objective_quarters y objective_initiatives
          - Crear tipos para las vistas optimizadas (manager_initiative_summary, etc.)
          - Actualizar enums (user_role, initiative_quarter)
          - Crear tipos para audit_log y progress_history
          - Eliminar tipos obsoletos del esquema anterior
        </details>
        <validation>
          - Verificar que todos los tipos coinciden con el esquema SQL
          - Confirmar que no hay tipos obsoletos referenciados
          - Validar que las relaciones foreign key están reflejadas
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de tipos TypeScript</baby_step>
      </step>

      <step number="1.2">
        <description>Crear interfaces específicas para las nuevas funcionalidades multi-tenant.</description>
        <details>
          - Crear interface TenantContext para manejo de tenant_id
          - Crear interface OrganizationProfile con datos de organización
          - Crear interface QuarterPlanning para gestión de trimestres
          - Crear interface AuditLogEntry para sistema de auditoría
          - Crear interface para filtros por tenant en queries
          - Actualizar UserProfile para incluir tenant_id
          - Crear tipos para las vistas especializadas
        </details>
        <validation>
          - Verificar que interfaces son consistentes con el esquema
          - Confirmar que tipos multi-tenant son completos
          - Validar que no hay conflictos con tipos existentes
        </validation>
        <baby_step>UN SOLO PASO: Solo creación de interfaces multi-tenant</baby_step>
      </step>

      <step number="1.3">
        <description>Actualizar schemas de validación para reflejar el nuevo modelo.</description>
        <details>
          - Actualizar components/forms/InitiativeForm/ValidationSchemas.ts
          - Cambiar referencias de 'name' a 'title' en initiatives
          - Agregar validaciones para tenant_id obligatorio
          - Crear schemas para objectives con area_id y tenant_id
          - Crear schemas para quarters y objective_quarters
          - Actualizar schemas para activities con nuevo modelo
          - Crear validaciones para progress_history
          - Eliminar validaciones obsoletas del modelo anterior
        </details>
        <validation>
          - Verificar que schemas validan correctamente datos del nuevo modelo
          - Confirmar que validaciones multi-tenant funcionan
          - Validar que no hay referencias a campos obsoletos
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de schemas de validación</baby_step>
      </step>
    </phase>

    <!-- FASE 2: ACTUALIZACIÓN DE HOOKS Y SERVICIOS DE DATOS -->
    <phase id="2-hooks-servicios-datos">
      <step number="2.1">
        <description>Actualizar hooks de datos para usar el nuevo esquema y vistas optimizadas.</description>
        <details>
          - Actualizar useInitiatives.tsx para usar 'title' en lugar de 'name'
          - Modificar queries para incluir tenant_id en todos los filtros
          - Actualizar useAreas.tsx para usar manager_id correctamente
          - Crear useQuarters.tsx para gestión de trimestres
          - Crear useObjectives.tsx para el nuevo modelo de objetivos
          - Actualizar useActivities.tsx para el modelo con assigned_to
          - Crear useAuditLog.tsx para sistema de auditoría
          - Implementar hooks para vistas optimizadas (useManagerSummary, etc.)
        </details>
        <validation>
          - Probar que hooks retornan datos con estructura correcta
          - Verificar que filtros por tenant funcionan correctamente
          - Confirmar que no hay errores en queries SQL
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de hooks existentes</baby_step>
      </step>

      <step number="2.2">
        <description>Crear hooks especializados para funcionalidades del nuevo modelo.</description>
        <details>
          - Crear useTenantContext.tsx para manejo de contexto multi-tenant
          - Crear useOrganization.tsx para datos de organización
          - Crear useQuarterPlanning.tsx para planificación trimestral
          - Crear useObjectiveHierarchy.tsx para objetivos e iniciativas
          - Crear useManagerViews.tsx para vistas especializadas de manager
          - Crear useAuditTrail.tsx para seguimiento de cambios
          - Crear useProgressTracking.tsx para historial de progreso
          - Implementar hooks para upload de archivos con nuevo modelo
        </details>
        <validation>
          - Verificar que hooks especializados funcionan correctamente
          - Confirmar que datos multi-tenant se filtran apropiadamente
          - Validar que hooks usan las vistas optimizadas cuando corresponde
        </validation>
        <baby_step>UN SOLO PASO: Solo creación de hooks especializados</baby_step>
      </step>

      <step number="2.3">
        <description>Actualizar servicios de datos y APIs para el nuevo modelo.</description>
        <details>
          - Actualizar lib/stratix/data-service.ts para nuevo esquema
          - Modificar app/api/upload/route.ts para usar 'title' en initiatives
          - Actualizar APIs para incluir tenant_id en todas las operaciones
          - Crear servicios para gestión de quarters y objectives
          - Actualizar servicios de file upload para nuevo modelo
          - Modificar APIs para usar vistas optimizadas donde sea apropiado
          - Crear servicios para audit trail y progress history
          - Actualizar validaciones de API para nuevo esquema
        </details>
        <validation>
          - Probar que APIs funcionan con datos del nuevo modelo
          - Verificar que tenant isolation funciona en APIs
          - Confirmar que no hay errores en operaciones CRUD
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de servicios y APIs</baby_step>
      </step>
    </phase>

    <!-- FASE 3: ACTUALIZACIÓN DE COMPONENTES FRONTEND -->
    <phase id="3-componentes-frontend">
      <step number="3.1">
        <description>Actualizar componentes de formularios para el nuevo modelo de datos.</description>
        <details>
          - Actualizar components/forms/InitiativeForm/ para usar 'title'
          - Modificar formularios para incluir tenant_id automáticamente
          - Actualizar components/forms/ActivityManager/ para nuevo modelo activities
          - Crear componentes para gestión de objectives y quarters
          - Actualizar componentes de área para manager_id
          - Modificar formularios para usar tipos actualizados
          - Crear componentes para planificación trimestral
          - Actualizar validaciones en tiempo real
        </details>
        <validation>
          - Verificar que formularios guardan datos con estructura correcta
          - Confirmar que validaciones funcionan con nuevo modelo
          - Probar que no hay errores en submit de formularios
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de componentes de formularios</baby_step>
      </step>

      <step number="3.2">
        <description>Actualizar componentes de visualización y dashboards.</description>
        <details>
          - Actualizar components/InitiativeDashboard.tsx para nuevo modelo
          - Modificar components/manager/ para usar vistas optimizadas
          - Actualizar tablas y listados para mostrar 'title' en lugar de 'name'
          - Crear componentes para visualización de quarters
          - Actualizar components/charts/ para nuevas métricas
          - Modificar dashboards para usar tenant context
          - Crear componentes para audit trail visualization
          - Actualizar componentes de progress tracking
        </details>
        <validation>
          - Verificar que componentes muestran datos correctamente
          - Confirmar que dashboards reflejan métricas del nuevo modelo
          - Probar que no hay errores de renderizado
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de componentes de visualización</baby_step>
      </step>

      <step number="3.3">
        <description>Actualizar navegación y routing para multi-tenancy.</description>
        <details>
          - Actualizar components/role-navigation.tsx para tenant context
          - Modificar routing para incluir tenant awareness
          - Actualizar components/protected-route.tsx para RLS
          - Crear componentes para tenant switching si es necesario
          - Actualizar breadcrumbs y navegación para nuevo modelo
          - Modificar components/DashboardNavigation.tsx
          - Crear componentes para organization management
          - Actualizar filtros y búsquedas para tenant scope
        </details>
        <validation>
          - Verificar que navegación respeta tenant boundaries
          - Confirmar que routing funciona correctamente
          - Probar que no hay accesos cross-tenant no autorizados
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de navegación y routing</baby_step>
      </step>
    </phase>

    <!-- FASE 4: MIGRACIÓN DE DATOS Y CONFIGURACIÓN -->
    <phase id="4-migracion-datos-configuracion">
      <step number="4.1">
        <description>Ejecutar migraciones de base de datos y verificar integridad.</description>
        <details>
          - Ejecutar migraciones en orden: 20240101000001 a 20240101000007
          - Verificar que todas las tablas se crearon correctamente
          - Confirmar que triggers de auditoría funcionan
          - Validar que RLS políticas están activas
          - Verificar que vistas optimizadas retornan datos esperados
          - Confirmar que índices mejoran performance
          - Probar que constraints y foreign keys funcionan
          - Validar que tipos personalizados están disponibles
        </details>
        <validation>
          - Ejecutar queries de prueba en todas las tablas
          - Verificar que RLS bloquea accesos no autorizados
          - Confirmar que audit trail se genera automáticamente
        </validation>
        <baby_step>UN SOLO PASO: Solo ejecución y verificación de migraciones</baby_step>
      </step>

      <step number="4.2">
        <description>Migrar datos existentes al nuevo modelo si es necesario.</description>
        <details>
          - Identificar datos existentes que necesitan migración
          - Crear scripts para migrar initiatives (name -> title)
          - Migrar user_profiles para incluir tenant_id
          - Crear registros de organizations y tenants para datos existentes
          - Migrar areas para usar manager_id correctamente
          - Crear quarters default si no existen
          - Migrar activities al nuevo modelo con assigned_to
          - Validar integridad referencial después de migración
        </details>
        <validation>
          - Verificar que todos los datos se migraron correctamente
          - Confirmar que no hay referencias rotas
          - Validar que performance no se degradó
        </validation>
        <baby_step>UN SOLO PASO: Solo migración de datos existentes</baby_step>
      </step>

      <step number="4.3">
        <description>Actualizar configuración de la aplicación para nuevo modelo.</description>
        <details>
          - Actualizar variables de entorno si es necesario
          - Modificar configuración de Supabase client
          - Actualizar configuración de RLS en client
          - Crear configuración para tenant context
          - Actualizar configuración de cache para nuevas queries
          - Modificar configuración de upload para nuevo modelo
          - Crear configuración para audit logging
          - Actualizar configuración de performance monitoring
        </details>
        <validation>
          - Verificar que aplicación inicia sin errores
          - Confirmar que configuración multi-tenant funciona
          - Validar que no hay problemas de performance
        </validation>
        <baby_step>UN SOLO PASO: Solo actualización de configuración</baby_step>
      </step>
    </phase>

    <!-- FASE 5: TESTING Y VALIDACIÓN COMPLETA -->
    <phase id="5-testing-validacion-completa">
      <step number="5.1">
        <description>Crear y ejecutar tests para el nuevo modelo de datos.</description>
        <details>
          - Crear tests para nuevos tipos TypeScript
          - Crear tests para hooks actualizados
          - Crear tests para APIs con nuevo modelo
          - Crear tests para componentes actualizados
          - Crear tests para multi-tenancy y tenant isolation
          - Crear tests para RLS políticas
          - Crear tests para audit trail functionality
          - Crear tests de integración end-to-end
        </details>
        <validation>
          - Ejecutar toda la suite de tests y verificar que pasan
          - Confirmar que coverage se mantiene o mejora
          - Validar que no hay regresiones en funcionalidad
        </validation>
        <baby_step>UN SOLO PASO: Solo creación y ejecución de tests</baby_step>
      </step>

      <step number="5.2">
        <description>Realizar testing manual completo de funcionalidades críticas.</description>
        <details>
          - Probar creación, edición y eliminación de initiatives
          - Probar gestión de objectives y quarters
          - Probar funcionalidades de manager con vistas optimizadas
          - Probar upload de archivos con nuevo modelo
          - Probar filtros y búsquedas multi-tenant
          - Probar audit trail y progress tracking
          - Probar performance con datasets grandes
          - Probar funcionalidades de diferentes roles
        </details>
        <validation>
          - Completar checklist de testing manual
          - Confirmar que UX se mantiene o mejora
          - Verificar que performance es aceptable
        </validation>
        <baby_step>UN SOLO PASO: Solo testing manual completo</baby_step>
      </step>

      <step number="5.3">
        <description>Validar performance y optimización del nuevo modelo.</description>
        <details>
          - Ejecutar queries de performance en vistas optimizadas
          - Validar que índices mejoran tiempos de respuesta
          - Probar carga con múltiples tenants
          - Verificar que RLS no impacta negativamente performance
          - Probar escalabilidad del audit system
          - Validar que caching funciona con nuevo modelo
          - Ejecutar profiling de queries complejas
          - Optimizar queries si es necesario
        </details>
        <validation>
          - Confirmar que performance cumple con SLAs
          - Verificar que no hay queries N+1
          - Validar que sistema escala apropiadamente
        </validation>
        <baby_step>UN SOLO PASO: Solo validación de performance</baby_step>
      </step>
    </phase>

    <!-- FASE 6: DOCUMENTACIÓN TÉCNICA COMPLETA -->
    <phase id="6-documentacion-tecnica">
      <step number="6.1">
        <description>Crear documentación detallada del nuevo modelo de datos.</description>
        <details>
          - Actualizar docs/schema-doc.md con modelo completo
          - Crear diagramas ER del nuevo esquema
          - Documentar todas las tablas, campos y relaciones
          - Crear documentación de tipos personalizados
          - Documentar RLS políticas y su funcionamiento
          - Crear documentación de vistas optimizadas
          - Documentar sistema de auditoría
          - Crear documentación de triggers y funciones
        </details>
        <validation>
          - Revisar que documentación es completa y precisa
          - Verificar que diagramas reflejan esquema actual
          - Confirmar que ejemplos de código funcionan
        </validation>
        <baby_step>UN SOLO PASO: Solo documentación del modelo de datos</baby_step>
      </step>

      <step number="6.2">
        <description>Crear guías de migración y uso del nuevo modelo.</description>
        <details>
          - Crear guía de migración desde modelo anterior
          - Crear guía de desarrollo con nuevo modelo
          - Documentar patrones de uso para multi-tenancy
          - Crear guía de troubleshooting común
          - Documentar best practices para performance
          - Crear ejemplos de código para operaciones comunes
          - Documentar guías para diferentes roles de usuario
          - Crear documentación de APIs actualizadas
        </details>
        <validation>
          - Revisar que guías son claras y completas
          - Verificar que ejemplos de código funcionan
          - Confirmar que troubleshooting cubre casos comunes
        </validation>
        <baby_step>UN SOLO PASO: Solo guías de migración y uso</baby_step>
      </step>

      <step number="6.3">
        <description>Crear documentación técnica para el equipo de desarrollo.</description>
        <details>
          - Crear changelog detallado de la migración
          - Documentar breaking changes y su resolución
          - Crear documentación de deployment del nuevo modelo
          - Documentar configuración de entornos (dev, staging, prod)
          - Crear documentación de backup y recovery
          - Documentar monitoring y alertas para nuevo modelo
          - Crear documentación de security considerations
          - Documentar maintenance tasks y procedures
        </details>
        <validation>
          - Revisar que documentación técnica es completa
          - Verificar que procedures son ejecutables
          - Confirmar que security guidelines son claras
        </validation>
        <baby_step>UN SOLO PASO: Solo documentación técnica para desarrollo</baby_step>
      </step>
    </phase>
  </plan>

  <!-- REGLAS ESPECÍFICAS DEL PROYECTO -->
  <project_rules>
    <mandatory_compliance>
      <rule type="data_integrity">
        Mantener integridad referencial en todo momento durante la migración
      </rule>
      <rule type="tenant_isolation">
        Asegurar que tenant isolation funciona correctamente en todas las operaciones
      </rule>
      <rule type="backward_compatibility">
        Mantener APIs funcionando durante transición gradual
      </rule>
      <rule type="rls_security">
        Validar que RLS políticas bloquean accesos no autorizados
      </rule>
      <rule type="audit_trail">
        Asegurar que audit trail captura todas las operaciones críticas
      </rule>
    </mandatory_compliance>

    <migration_specific_rules>
      <rule type="gradual_migration">
        Migrar componentes gradualmente para minimizar downtime
      </rule>
      <rule type="rollback_plan">
        Mantener plan de rollback para cada paso crítico
      </rule>
      <rule type="data_backup">
        Crear backup completo antes de ejecutar migraciones
      </rule>
      <rule type="testing_first">
        Validar cada cambio con tests antes de deployment
      </rule>
    </migration_specific_rules>
  </project_rules>

  <!-- CRITERIOS DE ÉXITO -->
  <success_criteria>
    <criterion>
      Todas las migraciones de base de datos ejecutadas sin errores
    </criterion>
    <criterion>
      Aplicación funciona completamente con nuevo modelo de datos
    </criterion>
    <criterion>
      Multi-tenancy implementado y funcionando correctamente
    </criterion>
    <criterion>
      RLS políticas activas y validadas para todos los roles
    </criterion>
    <criterion>
      Sistema de auditoría capturando todas las operaciones
    </criterion>
    <criterion>
      Performance mantenida o mejorada con vistas optimizadas
    </criterion>
    <criterion>
      Todos los tests pasando con coverage >80%
    </criterion>
    <criterion>
      Documentación técnica completa y actualizada
    </criterion>
    <criterion>
      Zero data loss durante proceso de migración
    </criterion>
    <criterion>
      Funcionalidades de usuario final sin regresiones
    </criterion>
  </success_criteria>

  <!-- PLAN DE ROLLBACK -->
  <rollback_plan>
    <emergency_rollback>
      <step>Restaurar backup de base de datos pre-migración</step>
      <step>Revertir cambios en aplicación a commit anterior</step>
      <step>Restaurar configuración anterior de Supabase</step>
      <step>Validar que aplicación funciona con modelo anterior</step>
    </emergency_rollback>
    
    <partial_rollback>
      <step>Revertir migraciones específicas problemáticas</step>
      <step>Restaurar componentes específicos a versión anterior</step>
      <step>Mantener cambios exitosos y solo revertir problemáticos</step>
    </partial_rollback>
  </rollback_plan>

  <!-- CHECKLIST DE MIGRACIÓN -->
  <migration_checklist>
    <pre_migration>
      <item>✅ Backup completo de base de datos creado</item>
      <item>✅ Análisis de migraciones completado</item>
      <item>✅ Plan de migración aprobado por equipo</item>
      <item>✅ Entorno de testing preparado</item>
    </pre_migration>
    
    <during_migration>
      <item>⏳ Tipos TypeScript actualizados (Fase 1)</item>
      <item>⏳ Hooks y servicios migrados (Fase 2)</item>
      <item>⏳ Componentes frontend actualizados (Fase 3)</item>
      <item>⏳ Datos migrados y configuración actualizada (Fase 4)</item>
      <item>⏳ Testing completo ejecutado (Fase 5)</item>
      <item>⏳ Documentación técnica creada (Fase 6)</item>
    </during_migration>
    
    <post_migration>
      <item>⏳ Validación completa del sistema</item>
      <item>⏳ Performance testing completado</item>
      <item>⏳ Security testing ejecutado</item>
      <item>⏳ Documentación final aprobada</item>
      <item>⏳ Training del equipo completado</item>
    </post_migration>
  </migration_checklist>
</task_plan>
