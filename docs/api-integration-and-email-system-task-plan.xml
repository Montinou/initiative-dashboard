<?xml version="1.0" encoding="UTF-8"?>
<task_plan>
  <metadata>
    <title>Integración de APIs y Sistema de Correos Electrónicos</title>
    <description>Completar el Panel de Administración Organizacional implementando endpoints reales de Supabase y sistema de correos Brevo para invitaciones</description>
    <priority>ALTA</priority>
    <estimated_duration>8-12 horas</estimated_duration>
    <dependencies>
      <dependency>UI del Panel de Administración Organizacional completada</dependency>
      <dependency>Brevo SDK instalado y API key configurada</dependency>
      <dependency>Proyecto Supabase configurado con políticas RLS preparadas</dependency>
    </dependencies>
  </metadata>

  <phase id="1" name="Integración de APIs de Supabase">
    <description>Reemplazar datos mock con operaciones reales de base de datos Supabase</description>
    <estimated_duration>5-6 horas</estimated_duration>
    
    <tasks>
      <task id="1.1" priority="ALTA">
        <title>Actualizar Esquema de Base de Datos</title>
        <description>Asegurar que todas las tablas requeridas existan en Supabase con relaciones apropiadas</description>
        <deliverables>
          <deliverable>tabla organizations con campos de branding</deliverable>
          <deliverable>tabla areas con asignaciones de manager</deliverable>
          <deliverable>tabla user_area_assignments para relaciones muchos-a-muchos</deliverable>
          <deliverable>tabla invitations con seguimiento de estados</deliverable>
          <deliverable>tabla organization_settings para configuración</deliverable>
          <deliverable>tabla quarters para gestión de períodos</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Verificar esquema existente contra requerimientos</note>
          <note>Agregar columnas faltantes para branding (logo_url, primary_color, etc.)</note>
          <note>Asegurar restricciones de clave foránea apropiadas</note>
          <note>Crear archivo de migración de políticas RLS pero no implementar aún</note>
        </implementation_notes>
      </task>

      <task id="1.2" priority="ALTA">
        <title>Crear Utilidades de Cliente Supabase</title>
        <description>Configurar clientes Supabase apropiados para diferentes contextos de seguridad</description>
        <deliverables>
          <deliverable>lib/supabase/client.ts - Cliente del navegador</deliverable>
          <deliverable>lib/supabase/server.ts - Cliente del servidor</deliverable>
          <deliverable>lib/supabase/admin.ts - Cliente admin con service role</deliverable>
          <deliverable>Definiciones de tipos para todas las tablas de base de datos</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Usar diferentes clientes basados en contexto (navegador vs servidor)</note>
          <note>Cliente admin solo para operaciones del lado del servidor</note>
          <note>Generar tipos desde el esquema de Supabase</note>
        </implementation_notes>
      </task>

      <task id="1.3" priority="ALTA">
        <title>Implementar API de Gestión de Áreas</title>
        <description>Reemplazar funciones mock con operaciones reales de Supabase</description>
        <deliverables>
          <deliverable>app/api/admin/areas/route.ts - Endpoints CRUD</deliverable>
          <deliverable>app/api/admin/areas/[id]/route.ts - Operaciones de área individual</deliverable>
          <deliverable>app/api/admin/areas/[id]/users/route.ts - Endpoints de asignación de usuarios</deliverable>
          <deliverable>hooks/useAreas.ts actualizado con llamadas a API reales</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Implementar manejo de errores apropiado</note>
          <note>Agregar validación con esquemas Zod</note>
          <note>Omitir implementación de políticas RLS por ahora</note>
          <note>Manejar actualizaciones de asignación de manager</note>
        </implementation_notes>
      </task>

      <task id="1.4" priority="ALTA">
        <title>Implementar API de Gestión de Usuarios</title>
        <description>Conectar gestión de usuarios con Supabase Auth y perfiles</description>
        <deliverables>
          <deliverable>app/api/admin/users/route.ts - Listado y actualizaciones de usuarios</deliverable>
          <deliverable>app/api/admin/users/[id]/route.ts - Operaciones de usuario individual</deliverable>
          <deliverable>app/api/admin/users/bulk/route.ts - Operaciones masivas</deliverable>
          <deliverable>hooks/useUsers.ts actualizado con llamadas a API reales</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Integrar con Supabase Auth para gestión de usuarios</note>
          <note>Manejar actualizaciones de roles y permisos</note>
          <note>Implementar búsqueda y filtrado de usuarios</note>
          <note>Agregar logging de auditoría para cambios de usuarios</note>
        </implementation_notes>
      </task>

      <task id="1.5" priority="MEDIA">
        <title>Implementar API de Gestión de Objetivos</title>
        <description>Conectar objetivos con operaciones reales de base de datos</description>
        <deliverables>
          <deliverable>app/api/admin/objectives/route.ts - CRUD de objetivos</deliverable>
          <deliverable>app/api/admin/objectives/bulk/route.ts - Operaciones masivas</deliverable>
          <deliverable>hooks/useObjectives.ts actualizado con llamadas a API reales</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Manejar relaciones jerárquicas de objetivos</note>
          <note>Implementar cálculo de progreso</note>
          <note>Agregar filtrado por área, trimestre, estado</note>
        </implementation_notes>
      </task>

      <task id="1.6" priority="MEDIA">
        <title>Implementar API de Configuración de Organización</title>
        <description>Conectar gestión de configuraciones con base de datos</description>
        <deliverables>
          <deliverable>app/api/admin/settings/route.ts - CRUD de configuraciones</deliverable>
          <deliverable>app/api/admin/quarters/route.ts - Gestión de trimestres</deliverable>
          <deliverable>hooks/useOrganizationSettings.ts actualizado</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Manejar almacenamiento de configuraciones JSON</note>
          <note>Implementar subida de archivos para logos</note>
          <note>Agregar validación para todas las configuraciones</note>
        </implementation_notes>
      </task>
    </tasks>
  </phase>

  <phase id="2" name="Implementación del Sistema de Correos Brevo">
    <description>Implementar envío real de correos usando Brevo SDK para invitaciones y notificaciones</description>
    <estimated_duration>3-4 horas</estimated_duration>
    
    <tasks>
      <task id="2.1" priority="ALTA">
        <title>Configurar Servicio de Correos Brevo</title>
        <description>Crear servicio de correos usando Brevo SDK</description>
        <deliverables>
          <deliverable>lib/email/brevo.ts - Configuración del cliente Brevo</deliverable>
          <deliverable>lib/email/templates.ts - Definiciones de plantillas de correo</deliverable>
          <deliverable>lib/email/types.ts - Definiciones de tipos del servicio de correos</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Usar BREVO_API_KEY de variables de entorno</note>
          <note>Configurar información del remitente y valores por defecto</note>
          <note>Crear sistema de plantillas reutilizable</note>
          <note>Agregar manejo de errores y lógica de reintentos</note>
        </implementation_notes>
      </task>

      <task id="2.2" priority="ALTA">
        <title>Implementar Sistema de Correos de Invitación</title>
        <description>Reemplazar sistema mock de invitaciones con envío real de correos</description>
        <deliverables>
          <deliverable>app/api/admin/invitations/route.ts - API de invitaciones con correo</deliverable>
          <deliverable>app/api/admin/invitations/bulk/route.ts - Endpoint de invitaciones masivas</deliverable>
          <deliverable>lib/email/invitation-service.ts - Lógica de correos de invitación</deliverable>
          <deliverable>components/org-admin/InvitationsManagement.tsx actualizado</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Enviar correos de invitación a través de Brevo</note>
          <note>Incluir magic links para configuración de usuario</note>
          <note>Manejar estado de entrega de correos</note>
          <note>Almacenar registros de invitación en base de datos</note>
          <note>Implementar lógica de expiración de invitaciones</note>
        </implementation_notes>
      </task>

      <task id="2.3" priority="MEDIA">
        <title>Crear Plantillas de Correo</title>
        <description>Diseñar e implementar plantillas de correo profesionales</description>
        <deliverables>
          <deliverable>email-templates/invitation.html - Plantilla de invitación de usuario</deliverable>
          <deliverable>email-templates/welcome.html - Plantilla de correo de bienvenida</deliverable>
          <deliverable>email-templates/password-reset.html - Plantilla de restablecimiento de contraseña</deliverable>
          <deliverable>Personalización de plantillas con branding organizacional</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Usar branding organizacional (colores, logo)</note>
          <note>Incluir botones de llamada a la acción claros</note>
          <note>Hacer plantillas responsivas para móviles</note>
          <note>Agregar variables de personalización</note>
        </implementation_notes>
      </task>

      <task id="2.4" priority="MEDIA">
        <title>Integrar con Supabase Auth</title>
        <description>Conectar sistema de correos con flujo de autenticación de Supabase</description>
        <deliverables>
          <deliverable>app/api/auth/invite/route.ts - Manejar aceptación de invitaciones</deliverable>
          <deliverable>app/auth/invite/page.tsx - Página de aceptación de invitaciones</deliverable>
          <deliverable>Integración con callback de Supabase Auth</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Usar API Admin de Supabase para creación de usuarios</note>
          <note>Manejar validación de tokens de invitación</note>
          <note>Establecer roles y permisos iniciales de usuario</note>
          <note>Redirigir al dashboard apropiado</note>
        </implementation_notes>
      </task>

      <task id="2.5" priority="BAJA">
        <title>Agregar Analíticas de Correo</title>
        <description>Rastrear métricas de entrega y engagement de correos</description>
        <deliverables>
          <deliverable>Seguimiento de estado de entrega de correos</deliverable>
          <deliverable>Seguimiento de tasa de apertura y clics</deliverable>
          <deliverable>Manejo de entregas fallidas y lógica de reintentos</deliverable>
          <deliverable>Integración con dashboard de analíticas</deliverable>
        </deliverables>
        <implementation_notes>
          <note>Usar webhooks de Brevo para estado de entrega</note>
          <note>Almacenar datos de analíticas en base de datos</note>
          <note>Mostrar métricas en panel de administración</note>
        </implementation_notes>
      </task>
    </tasks>
  </phase>

  <phase id="3" name="Pruebas y Validación">
    <description>Probar todas las integraciones y asegurar preparación para producción</description>
    <estimated_duration>2-3 horas</estimated_duration>
    
    <tasks>
      <task id="3.1" priority="ALTA">
        <title>Pruebas de Integración</title>
        <description>Probar todos los endpoints de API y funcionalidad de correos</description>
        <deliverables>
          <deliverable>Probar que todas las operaciones CRUD funcionen con Supabase</deliverable>
          <deliverable>Verificar envío de correos y flujo de invitaciones</deliverable>
          <deliverable>Probar manejo de errores y casos límite</deliverable>
          <deliverable>Validar seguridad básica sin RLS por ahora</deliverable>
        </deliverables>
      </task>

      <task id="3.2" priority="MEDIA">
        <title>Optimización de Rendimiento</title>
        <description>Optimización básica sin caché complejo</description>
        <deliverables>
          <deliverable>Agregar índices apropiados de base de datos</deliverable>
          <deliverable>Implementar optimización de consultas</deliverable>
          <deliverable>Optimizar renderizado de plantillas de correo</deliverable>
        </deliverables>
      </task>

      <task id="3.3" priority="MEDIA">
        <title>Manejo de Errores y Monitoreo</title>
        <description>Implementar manejo comprehensivo de errores</description>
        <deliverables>
          <deliverable>Agregar boundaries de error apropiados</deliverable>
          <deliverable>Implementar manejo de errores de API</deliverable>
          <deliverable>Agregar logging para depuración</deliverable>
          <deliverable>Configurar monitoreo para entrega de correos</deliverable>
        </deliverables>
      </task>
    </tasks>
  </phase>

  <completion_criteria>
    <criterion>Todos los endpoints de API se conectan a la base de datos real de Supabase</criterion>
    <criterion>Invitaciones por correo se envían exitosamente a través de Brevo</criterion>
    <criterion>El flujo de invitación de usuarios funciona de extremo a extremo</criterion>
    <criterion>Todas las operaciones CRUD funcionan con validación apropiada</criterion>
    <criterion>Migración de políticas RLS creada (no implementada aún)</criterion>
    <criterion>Manejo de errores cubre todos los casos límite</criterion>
    <criterion>Rendimiento optimizado para uso en producción (sin caché)</criterion>
  </completion_criteria>

  <implementation_prompt>
    Eres un desarrollador full-stack experto implementando la fase final de un Panel de Administración Organizacional empresarial. Tu tarea es:

    1. **REEMPLAZAR TODOS LOS DATOS MOCK** con operaciones reales de base de datos Supabase
    2. **IMPLEMENTAR SISTEMA DE CORREOS BREVO** para invitaciones de usuarios y notificaciones
    3. **ASEGURAR PREPARACIÓN PARA PRODUCCIÓN** con manejo apropiado de errores y seguridad

    **IMPORTANTE: SIEMPRE RESPETAR LAS .CLINERULES**
    - **BABYSTEPS OBLIGATORIOS**: Implementar cambios pequeños e incrementales
    - **UNA FUNCIONALIDAD A LA VEZ**: No implementar múltiples features simultáneamente
    - **TESTING CONTINUO**: Probar cada cambio antes de continuar
    - **COMMITS FRECUENTES**: Hacer commits después de cada babystep completado
    - **ROLLBACK SEGURO**: Cada paso debe poder revertirse fácilmente

    Requerimientos Clave:
    - Usar cliente Supabase apropiadamente (contextos navegador vs servidor vs admin)
    - Implementar todas las operaciones CRUD con validación apropiada
    - Crear migración de políticas RLS pero omitir implementación por ahora
    - Usar Brevo SDK para envío de correos profesional
    - Crear plantillas de correo HTML hermosas con branding organizacional
    - Manejar flujo de invitaciones de extremo a extremo con Supabase Auth
    - Agregar manejo comprehensivo de errores y estados de carga
    - Optimización básica de rendimiento sin caché complejo

    **Metodología de Implementación (BABYSTEPS):**
    1. **Paso 1**: Crear un solo archivo/función
    2. **Paso 2**: Probarlo aisladamente
    3. **Paso 3**: Integrarlo con el sistema existente
    4. **Paso 4**: Verificar que no rompe nada
    5. **Paso 5**: Commit y continuar con el siguiente

    La UI existente está completa y no debe modificarse a menos que sea necesario para integración de API. Enfócate en:
    - Crear endpoints de API robustos en app/api/admin/
    - Implementar operaciones reales de base de datos
    - Configurar servicio de correos con plantillas
    - Probar toda la funcionalidad exhaustivamente

    Usa la documentación en docs/smtp-brevo-SDK.md como tu guía para implementar el sistema de correos con Brevo SDK.

    Mantén la calidad de código existente y los patrones establecidos en los componentes de UI.

    **RECORDATORIO FINAL**: Cada implementación debe seguir el principio de babysteps - cambios pequeños, verificación constante, y progreso incremental seguro.
  </implementation_prompt>
</task_plan>
