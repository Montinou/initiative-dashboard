<task_plan id="bigquery-wrappers-setup" type="database_integration">
  <task>
    <objective>Habilitar sincronización inversa BigQuery → Supabase usando Wrappers (FDW) de forma programática y segura (Vault).</objective>
    <description>Unificar migraciones y remover scripts/archivos contradictorios. Configurar credenciales en Vault, crear/actualizar el servidor FDW y foreign tables, y definir vistas/RLS para consumo por la app.</description>
  </task>
  <analyze>
    <source type="file" file="scripts/setup_bigquery_wrapper.sh">
      Usa opciones incompatibles con BigQuery FDW (type, service_account, schema_name/table_name) y fuerza DROP/CREATE fuera del flujo de migraciones. Debe deprecarse.
    </source>
    <source type="file" file="supabase/migrations/20250809220000_create_bigquery_wrappers.sql">
      Crea SERVER con option location (no soportada a nivel server) y sin sa_key/sa_key_id. Define foreign tables en esquema público con nombres bigquery_iniciativas/bigquery_smart_suggestions. Potencial duplicidad con la nueva migración basada en Vault.
    </source>
    <source type="file" file="supabase/migrations/20250809231000_setup_bigquery_tables_only.sql">
      Mock útil; no crea SERVER. Compatible si se mantiene como fallback.
    </source>
    <source type="file" file="supabase/migrations/20250809232000_bigquery_wrappers_vault_server.sql">
      Nueva migración propuesta: usa sa_key_id (Vault), crea esquema bigquery y foreign tables bigquery.iniciativas y bigquery.smart_initiative_suggestions. Requiere key_id en Vault.
    </source>
    <source type="file" file="supabase/insaight-backend-54fcd5338cc7.json">
      Secreto en repositorio. Debe retirarse y migrarse a Vault.
    </source>
  </analyze>
  <risks>
    <item>Credenciales expuestas en el repo (archivo JSON).</item>
    <item>Estados divergentes si se ejecuta el script bash en paralelo a migraciones.</item>
    <item>Duplicidad/nombres inconsistentes de foreign tables (público vs esquema bigquery).</item>
    <item>Costos por escaneo en BigQuery si no se filtra adecuadamente.</item>
  </risks>
  <plan>
    <phase id="1-cleanup-y-unificacion">
      <step>
        <description>Deprecar script bash y retirar secretos.</description>
        <details>
- Eliminar o archivar scripts/setup_bigquery_wrapper.sh y añadir cabecera "DEPRECATED" si se conserva.
- Remover supabase/insaight-backend-54fcd5338cc7.json del repo e historial (git filter-repo o GitHub Secret Scanning), y añadir a .gitignore.
- Actualizar README/Docs para referenciar la configuración vía migraciones y Vault.
        </details>
      </step>
      <step>
        <description>Unificar migraciones.</description>
        <details>
- Mantener 20250809232000_bigquery_wrappers_vault_server.sql (Vault + esquema bigquery).
- Convertir 20250809220000_create_bigquery_wrappers.sql en migración de compatibilidad: reemplazar CREATE SERVER por ALTER SERVER para añadir sa_key_id o eliminar la sección de SERVER; mantener solo objetos locales si aplican.
- Compatibilidad: decidir entre actualizar referencias a esquema bigquery o crear vistas alias en público (ver Fase 3).
        </details>
      </step>
    </phase>
    <phase id="2-vault-y-servidor">
      <step>
        <description>Crear secreto en Vault y registrar key_id.</description>
        <details>
- Ejecutar vault.create_secret('<json SA>', 'bigquery', 'BigQuery SA for Wrappers') y guardar el key_id.
        </details>
      </step>
      <step>
        <description>Actualizar migración con sa_key_id.</description>
        <details>
- Reemplazar REPLACE_WITH_VAULT_KEY_ID en 20250809232000_bigquery_wrappers_vault_server.sql con el key_id.
- Si ya existe bigquery_server sin credenciales, añadir migración: ALTER SERVER bigquery_server OPTIONS (SET sa_key_id '<key_id>');
        </details>
      </step>
    </phase>
    <phase id="3-esquema-y-compatibilidad">
      <step>
        <description>Definir esquema y nombres canónicos.</description>
        <details>
- Usar esquema bigquery con tablas: bigquery.iniciativas y bigquery.smart_initiative_suggestions.
- Actualizar referencias en la app a estos nombres (grep: "bigquery_iniciativas|bigquery_smart_suggestions").
        </details>
      </step>
      <step>
        <description>Vistas alias en público (opción de compatibilidad).</description>
        <details>
- Crear vistas alias en el esquema público mientras se actualiza la app:
  create view if not exists public.bigquery_iniciativas as select * from bigquery.iniciativas;
  create view if not exists public.bigquery_smart_suggestions as select * from bigquery.smart_initiative_suggestions;
- Aplicar RLS sobre estas vistas si son las expuestas a la app.
- Establecer una ventana de compatibilidad y planificar su remoción.
        </details>
      </step>
    </phase>
    <phase id="4-aplicacion-y-pruebas">
      <step>
        <description>Aplicar migraciones.</description>
        <details>
- Local: supabase db push
- Remoto: supabase link && supabase db push
        </details>
      </step>
      <step>
        <description>Pruebas de conexión y rendimiento.</description>
        <details>
- SELECT count(*) FROM bigquery.iniciativas LIMIT 1;
- SELECT * FROM bigquery.smart_initiative_suggestions LIMIT 5;
- Validar costos y considerar subqueries en option table para pushdown si procede.
        </details>
      </step>
    </phase>
  </plan>
  <prompt>
    <instructions>
      1) Depreca scripts/setup_bigquery_wrapper.sh y elimina secretos del repo (supabase/insaight-backend-54fcd5338cc7.json). Añade a .gitignore.
      2) Carga el JSON de la Service Account en Vault con vault.create_secret(...) y copia el key_id.
      3) Edita supabase/migrations/20250809232000_bigquery_wrappers_vault_server.sql y reemplaza REPLACE_WITH_VAULT_KEY_ID.
      4) Si ya existía bigquery_server sin credenciales, crea una migración con: ALTER SERVER bigquery_server OPTIONS (SET sa_key_id '<key_id>').
      5) Elige estrategia de compatibilidad:
         a) Actualiza todas las referencias en la app a usar esquema bigquery (bigquery.iniciativas, bigquery.smart_initiative_suggestions), o
         b) Crea vistas alias en público y aplica RLS sobre ellas hasta completar el refactor.
      6) Aplica migraciones con supabase db push. Prueba con SELECTs limitados.
      7) En endpoints SSR utiliza el patrón de auth del proyecto, consultando las vistas RLS-enabled.
    </instructions>
  </prompt>
</task_plan>
