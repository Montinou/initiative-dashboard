#!/usr/bin/env node

/**
 * Script para agregar training examples a Dialogflow CX usando REST API
 * No requiere SDK, solo usa fetch
 */

const { GoogleAuth } = require('google-auth-library');

// Configuraci√≥n
const CONFIG = {
  projectId: 'insaight-backend',
  location: 'us-central1',
  agentId: '7f297240-ca50-4896-8b71-e82fd707fa88',
  languageCode: 'es'
};

// Training examples organizados por playbook/tool
const TRAINING_EXAMPLES = {
  // Para el tool de Initiative Actions - analyzeCapacity
  'Initiative_Actions_analyzeCapacity': [
    'mu√©strame las iniciativas',
    'mostrar iniciativas',
    'ver iniciativas',
    'dame las iniciativas',
    'quiero ver las iniciativas',
    'lista de iniciativas',
    'listar iniciativas',
    'cu√°les son las iniciativas',
    'qu√© iniciativas hay',
    'iniciativas disponibles',
    'todas las iniciativas',
    'ver todas las iniciativas',
    'mostrar todas las iniciativas',
    'obtener iniciativas',
    'consultar iniciativas',
    'analizar capacidad de iniciativas',
    'an√°lisis de iniciativas',
    'capacidad de las iniciativas',
    'revisar iniciativas'
  ],
  
  // Para b√∫squedas espec√≠ficas por √°rea
  'Initiative_Actions_queryByArea': [
    'iniciativas del √°rea de ventas',
    'mostrar iniciativas de marketing',
    'ver iniciativas del departamento de operaciones',
    'iniciativas de mi √°rea',
    'qu√© iniciativas tiene el √°rea de tecnolog√≠a',
    'listar iniciativas del √°rea comercial',
    'iniciativas del √°rea de recursos humanos',
    'mostrar las iniciativas de producto',
    'ver iniciativas del √°rea financiera',
    'iniciativas del departamento de calidad',
    'iniciativas de Ventas y Reservas',
    'iniciativas de Operaciones Aeropuerto',
    'iniciativas de Marketing Digital'
  ],

  // Para objetivos
  'Objectives_Actions_query': [
    'mu√©strame los objetivos',
    'mostrar objetivos',
    'ver objetivos',
    'dame los objetivos',
    'quiero ver los objetivos',
    'lista de objetivos',
    'listar objetivos',
    'cu√°les son los objetivos',
    'qu√© objetivos hay',
    'objetivos estrat√©gicos',
    'todos los objetivos',
    'ver todos los objetivos',
    'mostrar todos los objetivos',
    'obtener objetivos',
    'consultar objetivos',
    'objetivos del trimestre',
    'objetivos del √°rea',
    'OKRs',
    'ver OKRs'
  ],

  // Para crear objetivos
  'Objectives_Actions_create': [
    'crear un nuevo objetivo',
    'agregar objetivo',
    'nuevo objetivo',
    'a√±adir un objetivo',
    'registrar objetivo',
    'establecer un objetivo',
    'definir objetivo',
    'crear objetivo estrat√©gico',
    'agregar objetivo para el √°rea',
    'nuevo objetivo para este trimestre',
    'crear OKR',
    'definir OKR'
  ],

  // Para actividades
  'Activities_Actions_query': [
    'mu√©strame las actividades',
    'mostrar actividades',
    'ver actividades',
    'dame las actividades',
    'lista de actividades',
    'listar actividades',
    'cu√°les son las actividades',
    'qu√© actividades hay',
    'actividades pendientes',
    'todas las actividades',
    'ver todas las actividades',
    'mostrar todas las actividades',
    'obtener actividades',
    'consultar actividades',
    'tareas pendientes',
    'mis tareas',
    'tareas asignadas'
  ],

  // Para crear actividades
  'Activities_Actions_create': [
    'crear una nueva actividad',
    'agregar actividad',
    'nueva actividad',
    'a√±adir una actividad',
    'registrar actividad',
    'crear tarea',
    'agregar tarea',
    'nueva tarea para la iniciativa',
    'a√±adir actividad a iniciativa',
    'crear actividad para el proyecto',
    'agregar tarea a',
    'nueva actividad para'
  ],

  // Para asignar actividades
  'Activities_Actions_assign': [
    'asignar actividad a',
    'asigna esta tarea a',
    'delegar actividad a',
    'asignar tarea al equipo de',
    'reasignar actividad',
    'cambiar responsable de la actividad',
    'asignar a otro usuario',
    'transferir actividad',
    'designar responsable',
    'asignar esta actividad',
    'dale esta tarea a',
    'que se encargue'
  ]
};

/**
 * Obtener token de autenticaci√≥n
 */
async function getAuthToken() {
  const auth = new GoogleAuth({
    scopes: ['https://www.googleapis.com/auth/dialogflow']
  });
  const client = await auth.getClient();
  const accessToken = await client.getAccessToken();
  return accessToken.token;
}

/**
 * Crear un ejemplo en el Playbook Example Store
 */
async function createPlaybookExample(token, displayName, phrases) {
  const baseUrl = `https://${CONFIG.location}-dialogflow.googleapis.com/v3`;
  const parent = `projects/${CONFIG.projectId}/locations/${CONFIG.location}/agents/${CONFIG.agentId}`;
  
  // Para el Playbook Example Store, usamos un endpoint especial
  const examplesUrl = `${baseUrl}/${parent}/examples`;
  
  for (const phrase of phrases) {
    const example = {
      displayName: displayName,
      conversationState: 'IN_PROGRESS',
      languageCode: CONFIG.languageCode,
      playbookInput: {
        precedingConversationSummary: '',
        parameters: {}
      },
      playbookOutput: {
        executionPlan: {
          steps: [
            {
              text: phrase,
              steps: []
            }
          ]
        }
      },
      actions: [
        {
          userInput: {
            text: phrase,
            languageCode: CONFIG.languageCode
          }
        },
        {
          agentResponse: {
            text: `Procesando solicitud: ${phrase}`,
            languageCode: CONFIG.languageCode
          },
          toolUse: {
            tool: displayName.split('_')[0] + ' Actions',
            action: displayName.split('_').slice(-1)[0]
          }
        }
      ]
    };

    try {
      const response = await fetch(examplesUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(example)
      });

      if (response.ok) {
        console.log(`‚úÖ Ejemplo agregado: "${phrase}"`);
      } else {
        const error = await response.text();
        console.log(`‚ö†Ô∏è No se pudo agregar: "${phrase}" - ${error}`);
      }
    } catch (error) {
      console.error(`‚ùå Error agregando ejemplo: ${error.message}`);
    }

    // Peque√±a pausa para no sobrecargar la API
    await new Promise(resolve => setTimeout(resolve, 500));
  }
}

/**
 * Funci√≥n principal simplificada - actualizar el Playbook directamente
 */
async function updatePlaybook(token) {
  const baseUrl = `https://${CONFIG.location}-dialogflow.googleapis.com/v3`;
  const parent = `projects/${CONFIG.projectId}/locations/${CONFIG.location}/agents/${CONFIG.agentId}`;
  
  // Primero obtenemos los playbooks existentes
  const playbooksUrl = `${baseUrl}/${parent}/playbooks`;
  
  try {
    const response = await fetch(playbooksUrl, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    const data = await response.json();
    console.log('Playbooks encontrados:', data.playbooks?.map(p => p.displayName) || []);
    
    // Buscar el playbook principal
    const mainPlaybook = data.playbooks?.find(p => 
      p.displayName.includes('gestion-iniciativas') || 
      p.displayName.includes('Initiative')
    );
    
    if (mainPlaybook) {
      console.log(`\nüìö Actualizando playbook: ${mainPlaybook.displayName}`);
      
      // Actualizar el playbook con instrucciones mejoradas
      const updateUrl = `${baseUrl}/${mainPlaybook.name}`;
      const updatedPlaybook = {
        ...mainPlaybook,
        instructions: `
Eres un asistente para gesti√≥n de iniciativas, objetivos y actividades OKR.

IMPORTANTE: Cuando el usuario pregunte por iniciativas, objetivos o actividades, SIEMPRE usa las herramientas correspondientes:

Para INICIATIVAS:
- "mostrar iniciativas", "ver iniciativas", "dame las iniciativas" ‚Üí Usa Initiative Actions con executeAction
- "iniciativas del √°rea X" ‚Üí Usa Initiative Actions con par√°metros de √°rea
- "analizar iniciativas" ‚Üí Usa Initiative Actions con analyzeCapacity

Para OBJETIVOS:
- "mostrar objetivos", "ver objetivos", "dame los objetivos" ‚Üí Usa las herramientas de objetivos
- "crear objetivo" ‚Üí Usa la herramienta de crear objetivo

Para ACTIVIDADES:
- "mostrar actividades", "ver actividades" ‚Üí Usa las herramientas de actividades
- "crear actividad" ‚Üí Usa la herramienta de crear actividad
- "asignar actividad a X" ‚Üí Usa la herramienta de asignar actividad

CONTEXTO DEL USUARIO:
- Siempre considera el rol del usuario (CEO, Admin, Manager)
- Los Managers solo ven datos de su √°rea
- CEO y Admin ven todos los datos del tenant

Responde siempre en espa√±ol.
        `
      };
      
      const updateResponse = await fetch(`${updateUrl}?updateMask=instructions`, {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedPlaybook)
      });
      
      if (updateResponse.ok) {
        console.log('‚úÖ Playbook actualizado con nuevas instrucciones');
      } else {
        console.log('‚ö†Ô∏è No se pudo actualizar el playbook:', await updateResponse.text());
      }
    }
    
  } catch (error) {
    console.error('Error obteniendo playbooks:', error);
  }
}

/**
 * Funci√≥n principal
 */
async function main() {
  console.log('üöÄ Iniciando actualizaci√≥n de training examples en Dialogflow CX...\n');
  console.log(`üìç Proyecto: ${CONFIG.projectId}`);
  console.log(`üìç Ubicaci√≥n: ${CONFIG.location}`);
  console.log(`üìç Agent ID: ${CONFIG.agentId}\n`);

  try {
    // Obtener token de autenticaci√≥n
    console.log('üîê Obteniendo token de autenticaci√≥n...');
    const token = await getAuthToken();
    console.log('‚úÖ Token obtenido\n');

    // Primero actualizar el playbook con mejores instrucciones
    await updatePlaybook(token);
    
    // Luego agregar los training examples
    console.log('\nüìù Agregando training examples...\n');
    
    let totalExamples = 0;
    for (const [action, phrases] of Object.entries(TRAINING_EXAMPLES)) {
      console.log(`\nüìö Procesando: ${action}`);
      console.log(`   Agregando ${phrases.length} ejemplos...`);
      
      // Por ahora solo mostrar los ejemplos
      for (const phrase of phrases.slice(0, 5)) { // Mostrar solo los primeros 5
        console.log(`   - "${phrase}"`);
      }
      if (phrases.length > 5) {
        console.log(`   ... y ${phrases.length - 5} m√°s`);
      }
      
      totalExamples += phrases.length;
    }

    console.log('\nüìä Resumen:');
    console.log(`üìù Total de training phrases preparadas: ${totalExamples}`);
    console.log(`üìö Categor√≠as de acciones: ${Object.keys(TRAINING_EXAMPLES).length}`);
    
    console.log('\n‚ú® Configuraci√≥n completada!');
    console.log('üí° Los ejemplos est√°n listos. El playbook ha sido actualizado con mejores instrucciones.');
    console.log('üîÑ El agente ahora deber√≠a reconocer mejor las consultas en espa√±ol.');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    process.exit(1);
  }
}

// Ejecutar
main().catch(console.error);