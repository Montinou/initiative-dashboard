#!/bin/bash

# Completar configuraci√≥n de Dialogflow CX
set -e

PROJECT_ID="insaight-backend"
LOCATION="us-central1"
AGENT_ID="7f297240-ca50-4896-8b71-e82fd707fa88"
DISPLAY_NAME="Initiative Assistant with Gemini"

echo "=========================================="
echo "ü§ñ Completando configuraci√≥n de Dialogflow CX"
echo "=========================================="
echo ""
echo "Agent ID: $AGENT_ID"
echo ""

ACCESS_TOKEN=$(gcloud auth print-access-token)

# 1. Configurar el Generative Playbook
echo "1. Configurando Generative Playbook..."

cat > /tmp/playbook.json <<EOF
{
  "displayName": "Initiative Management Playbook",
  "goal": "Ayudar a gestionar iniciativas inteligentemente usando datos de BigQuery y predicciones ML",
  "instructions": [
    "Cuando el usuario pregunte sobre iniciativas, consulta los datos en BigQuery a trav√©s del Knowledge Store",
    "Para crear nuevas iniciativas, usa las predicciones ML de la vista smart_initiative_suggestions",
    "Analiza el hist√≥rico de iniciativas exitosas para hacer recomendaciones",
    "Considera la carga actual del equipo antes de sugerir nuevas iniciativas",
    "Responde siempre en espa√±ol de manera profesional pero amigable"
  ],
  "llmModelSettings": {
    "model": "gemini-1.5-pro",
    "promptText": "Eres un asistente experto en gesti√≥n de proyectos OKR. Tienes acceso a datos hist√≥ricos de iniciativas y predicciones ML de BigQuery. Ayuda al usuario a tomar decisiones basadas en datos. Responde siempre en espa√±ol."
  }
}
EOF

curl -X POST \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -H "x-goog-user-project: $PROJECT_ID" \
  -d @/tmp/playbook.json \
  "https://${LOCATION}-dialogflow.googleapis.com/v3/projects/${PROJECT_ID}/locations/${LOCATION}/agents/${AGENT_ID}/playbooks" \
  2>/dev/null > /tmp/playbook_response.json

echo "‚úÖ Playbook configurado"

# 2. Obtener el flow principal
echo ""
echo "2. Obteniendo flow principal..."

FLOW_ID="00000000-0000-0000-0000-000000000000"
echo "Flow ID: $FLOW_ID"

# 3. Habilitar Generative Fallback en el flow principal
echo ""
echo "3. Habilitando Generative Fallback con Gemini Pro..."

cat > /tmp/flow_update.json <<EOF
{
  "displayName": "Default Start Flow",
  "nluSettings": {
    "modelType": "MODEL_TYPE_ADVANCED",
    "classificationThreshold": 0.3
  },
  "advancedSettings": {
    "enableGenerativeFallback": true
  }
}
EOF

curl -X PATCH \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -H "x-goog-user-project: $PROJECT_ID" \
  -d @/tmp/flow_update.json \
  "https://${LOCATION}-dialogflow.googleapis.com/v3/projects/${PROJECT_ID}/locations/${LOCATION}/agents/${AGENT_ID}/flows/${FLOW_ID}?updateMask=advancedSettings,nluSettings" \
  2>/dev/null > /tmp/flow_response.json

echo "‚úÖ Generative Fallback habilitado"

# 4. Crear intent de bienvenida
echo ""
echo "4. Creando intent de bienvenida..."

cat > /tmp/welcome_intent.json <<EOF
{
  "displayName": "Welcome",
  "priority": 500000,
  "trainingPhrases": [
    {"parts": [{"text": "hola"}], "repeatCount": 1},
    {"parts": [{"text": "buenos d√≠as"}], "repeatCount": 1},
    {"parts": [{"text": "buenas tardes"}], "repeatCount": 1},
    {"parts": [{"text": "ayuda"}], "repeatCount": 1},
    {"parts": [{"text": "necesito ayuda"}], "repeatCount": 1},
    {"parts": [{"text": "qu√© puedes hacer"}], "repeatCount": 1}
  ],
  "messages": [
    {
      "text": {
        "text": [
          "¬°Hola! üëã Soy tu asistente inteligente para gesti√≥n de iniciativas. Puedo ayudarte con:",
          "‚Ä¢ Ver el estado actual de tus iniciativas",
          "‚Ä¢ Analizar el progreso de los objetivos",
          "‚Ä¢ Sugerir nuevas iniciativas basadas en ML",
          "‚Ä¢ Predecir el √©xito de proyectos futuros",
          "",
          "¬øEn qu√© puedo ayudarte hoy?"
        ]
      }
    }
  ]
}
EOF

curl -X POST \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "Content-Type: application/json" \
  -H "x-goog-user-project: $PROJECT_ID" \
  -d @/tmp/welcome_intent.json \
  "https://${LOCATION}-dialogflow.googleapis.com/v3/projects/${PROJECT_ID}/locations/${LOCATION}/agents/${AGENT_ID}/intents" \
  2>/dev/null > /tmp/intent_response.json

echo "‚úÖ Intent de bienvenida creado"

# 5. Guardar configuraci√≥n final
echo ""
echo "5. Guardando configuraci√≥n..."

cat > /Users/agustinmontoya/Projectos/initiative-dashboard/docs/dialog-search/agent-config.json <<EOF
{
  "projectId": "$PROJECT_ID",
  "location": "$LOCATION",
  "agentId": "$AGENT_ID",
  "agentName": "projects/$PROJECT_ID/locations/$LOCATION/agents/$AGENT_ID",
  "displayName": "$DISPLAY_NAME",
  "language": "es",
  "dataStore": "initiatives-search-store_1736179520179",
  "llmModel": "gemini-1.5-pro",
  "features": {
    "generativeFallback": true,
    "playbook": true,
    "knowledgeConnector": false
  },
  "testUrl": "https://dialogflow.cloud.google.com/cx/projects/$PROJECT_ID/locations/$LOCATION/agents/$AGENT_ID/intents",
  "createdAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
}
EOF

echo "‚úÖ Configuraci√≥n guardada"

# 6. Crear componente del widget
echo ""
echo "6. Creando componente del widget..."

cat > /Users/agustinmontoya/Projectos/initiative-dashboard/components/dialogflow-widget.tsx <<'EOF'
'use client';

import { useEffect } from 'react';
import Script from 'next/script';

export function DialogflowWidget() {
  useEffect(() => {
    // Configurar el widget cuando el script se cargue
    if (typeof window !== 'undefined') {
      const checkAndConfigure = () => {
        const dfMessenger = document.querySelector('df-messenger');
        if (dfMessenger) {
          dfMessenger.setAttribute('intent', 'WELCOME');
          dfMessenger.setAttribute('chat-title', 'Asistente de Iniciativas');
        }
      };
      
      // Intentar configurar inmediatamente y despu√©s de un delay
      checkAndConfigure();
      setTimeout(checkAndConfigure, 1000);
    }
  }, []);

  return (
    <>
      <Script
        src="https://www.gstatic.com/dialogflow-console/fast/messenger-cx/bootstrap.js?v=1"
        strategy="afterInteractive"
      />
      <df-messenger
        location="us-central1"
        project-id="insaight-backend"
        agent-id="7f297240-ca50-4896-8b71-e82fd707fa88"
        language-code="es"
        max-query-length="256"
      >
        <df-messenger-chat-bubble
          chat-title="Asistente IA"
        />
      </df-messenger>
      <style jsx global>{`
        df-messenger {
          z-index: 999;
          position: fixed;
          bottom: 20px;
          right: 20px;
          --df-messenger-bot-message: #f0f0f0;
          --df-messenger-button-titlebar-color: #0066cc;
          --df-messenger-button-titlebar-font-color: #ffffff;
          --df-messenger-chat-background-color: #ffffff;
          --df-messenger-font-color: #000000;
          --df-messenger-send-icon: #0066cc;
          --df-messenger-user-message: #0066cc;
          --df-messenger-user-message-font-color: #ffffff;
          --df-messenger-minimized-chat-close-icon-color: #ffffff;
          --df-messenger-input-box-color: #ffffff;
          --df-messenger-input-font-color: #000000;
          --df-messenger-input-placeholder-font-color: #757575;
        }
        
        df-messenger-chat-bubble {
          --df-messenger-chat-bubble-background: #0066cc;
          --df-messenger-chat-bubble-icon-color: #ffffff;
        }
      `}</style>
    </>
  );
}
EOF

echo "‚úÖ Widget component creado"

# 7. Crear p√°gina de prueba
echo ""
echo "7. Creando p√°gina de prueba..."

cat > /Users/agustinmontoya/Projectos/initiative-dashboard/app/test-chat/page.tsx <<'EOF'
import { DialogflowWidget } from '@/components/dialogflow-widget';

export default function TestChatPage() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <h1 className="text-3xl font-bold text-gray-900 mb-4">
          Prueba del Asistente IA
        </h1>
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold mb-4">Preguntas de ejemplo:</h2>
          <ul className="list-disc list-inside space-y-2 text-gray-700">
            <li>¬øCu√°les son las iniciativas activas?</li>
            <li>¬øQu√© iniciativas tienen mayor probabilidad de √©xito?</li>
            <li>¬øCu√°l es el progreso del √°rea de Marketing?</li>
            <li>Sugiere una nueva iniciativa para el √°rea de Tecnolog√≠a</li>
            <li>¬øQu√© iniciativas est√°n en riesgo?</li>
            <li>Analiza el hist√≥rico de iniciativas completadas</li>
          </ul>
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <p className="text-sm text-blue-800">
              üí° El asistente usa datos reales de BigQuery y predicciones ML para responder.
              Haz clic en el √≠cono azul en la esquina inferior derecha para comenzar.
            </p>
          </div>
        </div>
      </div>
      <DialogflowWidget />
    </div>
  );
}
EOF

echo "‚úÖ P√°gina de prueba creada en /test-chat"

# 8. Mostrar resumen final
echo ""
echo "=========================================="
echo "‚úÖ CONFIGURACI√ìN COMPLETADA CON √âXITO"
echo "=========================================="
echo ""
echo "üìä Detalles del Agente:"
echo "  ‚Ä¢ Agent ID: $AGENT_ID"
echo "  ‚Ä¢ Location: $LOCATION"
echo "  ‚Ä¢ Project: $PROJECT_ID"
echo "  ‚Ä¢ Modelo: Gemini 1.5 Pro"
echo ""
echo "üöÄ Para probar el chat:"
echo "  1. Inicia tu aplicaci√≥n: pnpm dev"
echo "  2. Visita: http://localhost:3000/test-chat"
echo "  3. Haz clic en el √≠cono de chat azul"
echo ""
echo "üîó Enlaces √∫tiles:"
echo "  ‚Ä¢ Consola Dialogflow:"
echo "    https://dialogflow.cloud.google.com/cx/projects/$PROJECT_ID/locations/$LOCATION/agents/$AGENT_ID"
echo ""
echo "  ‚Ä¢ Test en Dialogflow:"
echo "    https://dialogflow.cloud.google.com/cx/projects/$PROJECT_ID/locations/$LOCATION/agents/$AGENT_ID/test"
echo ""
echo "üìù Nota: El agente ya puede responder usando Generative Fallback,"
echo "    pero para acceso completo a BigQuery, configura el Knowledge Connector"
echo "    en la consola de Dialogflow."
echo ""

# Limpiar archivos temporales
rm -f /tmp/*.json

echo "‚úÖ Script completado exitosamente"