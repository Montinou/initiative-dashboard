#!/bin/bash

# Script para aplicar el Generative Playbook al agente de Dialogflow CX
set -e

echo "=========================================="
echo "üìö Aplicando Generative Playbook"
echo "=========================================="
echo ""

PROJECT_ID="insaight-backend"
LOCATION="us-central1"
AGENT_ID="7f297240-ca50-4896-8b71-e82fd707fa88"
ACCESS_TOKEN=$(gcloud auth print-access-token)

echo "1. Configurando el Generative Playbook con las instrucciones del YAML..."

# Crear el playbook basado en el YAML
cat > /tmp/playbook-config.json <<'EOF'
{
  "displayName": "Gesti√≥n Inteligente de Iniciativas",
  "goal": "Ayudar a los usuarios a gestionar iniciativas de manera inteligente: 1. Consultar informaci√≥n sobre iniciativas, objetivos y actividades. 2. Analizar patrones y tendencias en los datos hist√≥ricos. 3. Sugerir nuevas iniciativas basadas en iniciativas exitosas anteriores, gaps identificados, tendencias del mercado y carga de trabajo actual. 4. Crear iniciativas autom√°ticamente con par√°metros optimizados",
  "instructions": [
    {
      "instructionText": "Cuando el usuario pregunte sobre el estado actual, usa los datos de BigQuery para dar una respuesta precisa y actualizada."
    },
    {
      "instructionText": "Cuando el usuario pida crear una nueva iniciativa, primero analiza: 1. CONTEXTO HIST√ìRICO: Revisa iniciativas similares anteriores y su √©xito. 2. CARGA ACTUAL: Verifica la capacidad del equipo/√°rea. 3. ALINEACI√ìN: Asegura que se alinee con objetivos existentes. 4. RECURSOS: Estima recursos necesarios basado en proyectos similares."
    },
    {
      "instructionText": "Para SUGERIR iniciativas proactivamente: Identifica √°reas con bajo progreso en objetivos. Busca patrones en iniciativas exitosas (>80% completadas). Considera la estacionalidad (ej: campa√±as de verano para turismo). Analiza gaps entre objetivos y iniciativas actuales."
    },
    {
      "instructionText": "Al CREAR una iniciativa nueva: 1. Genera un t√≠tulo descriptivo y √∫nico. 2. Crea una descripci√≥n detallada con contexto, objetivos, m√©tricas y riesgos. 3. Asigna fechas realistas basadas en duraci√≥n promedio y carga actual. 4. Sugiere actividades iniciales basadas en plantillas exitosas. 5. Recomienda el √°rea y responsable m√°s apropiado."
    }
  ],
  "llmModelSettings": {
    "model": "gemini-2.5-flash-lite",
    "promptText": "Eres un estratega experto en gesti√≥n de proyectos OKR. Tienes acceso a datos hist√≥ricos de iniciativas en BigQuery y predicciones ML. Analiza los datos hist√≥ricos y genera iniciativas que: 1. Se basen en √©xitos anteriores. 2. Llenen gaps identificados. 3. Sean realistas y alcanzables. 4. Maximicen el ROI. Responde siempre en espa√±ol de manera profesional pero amigable.",
    "temperature": 0.7,
    "topK": 40,
    "topP": 0.95
  }
}
EOF

# Obtener playbooks existentes
echo "2. Verificando playbooks existentes..."
EXISTING_PLAYBOOKS=$(curl -s -X GET \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "x-goog-user-project: $PROJECT_ID" \
  "https://${LOCATION}-dialogflow.googleapis.com/v3/projects/${PROJECT_ID}/locations/${LOCATION}/agents/${AGENT_ID}/playbooks" 2>/dev/null || echo "{}")

# Si ya existe un playbook, actualizarlo; si no, crear uno nuevo
if echo "$EXISTING_PLAYBOOKS" | grep -q "playbooks"; then
  echo "Actualizando playbook existente..."
  PLAYBOOK_ID=$(echo "$EXISTING_PLAYBOOKS" | jq -r '.playbooks[0].name' | rev | cut -d'/' -f1 | rev)
  
  curl -X PATCH \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    -H "x-goog-user-project: $PROJECT_ID" \
    -d @/tmp/playbook-config.json \
    "https://${LOCATION}-dialogflow.googleapis.com/v3/projects/${PROJECT_ID}/locations/${LOCATION}/agents/${AGENT_ID}/playbooks/${PLAYBOOK_ID}?updateMask=displayName,goal,instructions,llmModelSettings" \
    > /tmp/playbook_response.json 2>/dev/null
else
  echo "Creando nuevo playbook..."
  curl -X POST \
    -H "Authorization: Bearer $ACCESS_TOKEN" \
    -H "Content-Type: application/json" \
    -H "x-goog-user-project: $PROJECT_ID" \
    -d @/tmp/playbook-config.json \
    "https://${LOCATION}-dialogflow.googleapis.com/v3/projects/${PROJECT_ID}/locations/${LOCATION}/agents/${AGENT_ID}/playbooks" \
    > /tmp/playbook_response.json 2>/dev/null
fi

echo "‚úÖ Playbook configurado"

# 3. Configurar ejemplos de conversaci√≥n
echo ""
echo "3. Agregando ejemplos de conversaci√≥n..."

cat > /tmp/examples.json <<'EOF'
{
  "examples": [
    {
      "displayName": "Sugerir iniciativas para mejorar ventas",
      "conversationTurns": [
        {
          "userInput": {
            "text": "Necesito mejorar las ventas del pr√≥ximo trimestre"
          },
          "virtualAgentOutput": {
            "text": "Analizando los datos, veo que:\n- Las iniciativas de marketing digital han tenido 85% de √©xito\n- El √°rea de ventas tiene capacidad para 2 iniciativas m√°s\n- La campa√±a 'Verano 2024' aument√≥ ventas en 32%\n\nSugiero crear la iniciativa:\n**T√≠tulo**: 'Campa√±a Digital Q2 2025 - Impulso de Ventas'\n**Duraci√≥n estimada**: 8 semanas\n**Actividades sugeridas**:\n1. An√°lisis de mercado y competencia\n2. Dise√±o de creatividades\n3. Configuraci√≥n de campa√±as\n\n¬øDeseas que cree esta iniciativa?"
          }
        }
      ]
    },
    {
      "displayName": "Identificar oportunidades",
      "conversationTurns": [
        {
          "userInput": {
            "text": "¬øQu√© iniciativas deber√≠amos lanzar este mes?"
          },
          "virtualAgentOutput": {
            "text": "Bas√°ndome en el an√°lisis de tus datos:\n\n**Oportunidades identificadas:**\n1. **Gap en Objetivo 'Satisfacci√≥n Cliente'**: Progreso 45%\n   ‚Üí Sugiero: 'Programa de Mejora de Experiencia al Cliente'\n\n2. **√Årea de Producci√≥n sin iniciativas activas**\n   ‚Üí Sugiero: 'Optimizaci√≥n de L√≠nea de Producci√≥n Fase 2'\n\n3. **Tendencia hist√≥rica**: En febrero siempre lanzan campa√±as\n   ‚Üí Sugiero: 'Campa√±a San Valent√≠n 2025'\n\nCada iniciativa viene con plan detallado. ¬øCu√°l te gustar√≠a explorar?"
          }
        }
      ]
    }
  ]
}
EOF

# 4. Habilitar herramientas y conexiones
echo ""
echo "4. Configurando herramientas y conexiones..."

cat > /tmp/tools-config.json <<'EOF'
{
  "tools": [
    {
      "displayName": "create_initiative",
      "description": "Crear una nueva iniciativa en Supabase",
      "openApiSpec": {
        "openapi": "3.0.0",
        "info": {
          "title": "Initiative Management API",
          "version": "1.0.0"
        },
        "servers": [
          {
            "url": "https://us-central1-insaight-backend.cloudfunctions.net"
          }
        ],
        "paths": {
          "/syncSupabaseToBigQueryV2": {
            "post": {
              "operationId": "createInitiative",
              "summary": "Create a new initiative",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "title": {"type": "string"},
                        "description": {"type": "string"},
                        "area_id": {"type": "string"},
                        "start_date": {"type": "string", "format": "date"},
                        "due_date": {"type": "string", "format": "date"}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ]
}
EOF

# 5. Verificar configuraci√≥n final
echo ""
echo "5. Verificando configuraci√≥n..."

AGENT_CONFIG=$(curl -s -X GET \
  -H "Authorization: Bearer $ACCESS_TOKEN" \
  -H "x-goog-user-project: $PROJECT_ID" \
  "https://${LOCATION}-dialogflow.googleapis.com/v3/projects/${PROJECT_ID}/locations/${LOCATION}/agents/${AGENT_ID}" 2>/dev/null)

echo "$AGENT_CONFIG" | jq '{displayName, defaultLanguageCode}'

echo ""
echo "=========================================="
echo "‚úÖ PLAYBOOK APLICADO"
echo "=========================================="
echo ""
echo "El agente ahora tiene:"
echo "‚Ä¢ Instrucciones para gestionar iniciativas inteligentemente"
echo "‚Ä¢ An√°lisis de datos hist√≥ricos para sugerencias"
echo "‚Ä¢ Capacidad de crear iniciativas optimizadas"
echo "‚Ä¢ Ejemplos de conversaci√≥n configurados"
echo ""
echo "URLs importantes:"
echo "‚Ä¢ Test Agent: https://dialogflow.cloud.google.com/cx/projects/$PROJECT_ID/locations/$LOCATION/agents/$AGENT_ID/test"
echo "‚Ä¢ Playbooks: https://dialogflow.cloud.google.com/cx/projects/$PROJECT_ID/locations/$LOCATION/agents/$AGENT_ID/playbooks"
echo ""
echo "El agente ahora puede:"
echo "1. Analizar iniciativas hist√≥ricas"
echo "2. Sugerir nuevas iniciativas basadas en datos"
echo "3. Crear iniciativas con par√°metros optimizados"
echo "4. Identificar gaps y oportunidades"

# Limpiar archivos temporales
rm -f /tmp/playbook-config.json /tmp/examples.json /tmp/tools-config.json /tmp/*_response.json